"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mysten";
exports.ids = ["vendor-chunks/@mysten"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs":
/*!*****************************************************!*\
  !*** ../../node_modules/@mysten/bcs/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BCS: () => (/* binding */ BCS),\n/* harmony export */   BcsReader: () => (/* binding */ BcsReader),\n/* harmony export */   BcsType: () => (/* binding */ BcsType),\n/* harmony export */   BcsWriter: () => (/* binding */ BcsWriter),\n/* harmony export */   SerializedBcs: () => (/* binding */ SerializedBcs),\n/* harmony export */   bcs: () => (/* binding */ bcs),\n/* harmony export */   decodeStr: () => (/* binding */ decodeStr),\n/* harmony export */   encodeStr: () => (/* binding */ encodeStr),\n/* harmony export */   fromB58: () => (/* binding */ fromB58),\n/* harmony export */   fromB64: () => (/* binding */ fromB64),\n/* harmony export */   fromHEX: () => (/* binding */ fromHEX),\n/* harmony export */   getRustConfig: () => (/* binding */ getRustConfig),\n/* harmony export */   getSuiMoveConfig: () => (/* binding */ getSuiMoveConfig),\n/* harmony export */   isSerializedBcs: () => (/* binding */ isSerializedBcs),\n/* harmony export */   registerPrimitives: () => (/* binding */ registerPrimitives),\n/* harmony export */   splitGenericParameters: () => (/* binding */ splitGenericParameters),\n/* harmony export */   toB58: () => (/* binding */ toB58),\n/* harmony export */   toB64: () => (/* binding */ toB64),\n/* harmony export */   toHEX: () => (/* binding */ toHEX)\n/* harmony export */ });\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs58 */ \"(ssr)/../../node_modules/bs58/index.js\");\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/b58.ts\n\nvar toB58 = (buffer) => bs58__WEBPACK_IMPORTED_MODULE_0__.encode(buffer);\nvar fromB58 = (str) => bs58__WEBPACK_IMPORTED_MODULE_0__.decode(str);\n\n// src/b64.ts\nfunction b64ToUint6(nChr) {\n  return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;\n}\nfunction fromB64(sBase64, nBlocksSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9+/]/g, \"\"), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3;\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 6 * (3 - nMod4);\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n      }\n      nUint24 = 0;\n    }\n  }\n  return taBytes;\n}\nfunction uint6ToB64(nUint6) {\n  return nUint6 < 26 ? nUint6 + 65 : nUint6 < 52 ? nUint6 + 71 : nUint6 < 62 ? nUint6 - 4 : nUint6 === 62 ? 43 : nUint6 === 63 ? 47 : 65;\n}\nfunction toB64(aBytes) {\n  var nMod3 = 2, sB64Enc = \"\";\n  for (var nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n    nMod3 = nIdx % 3;\n    nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n    if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n      sB64Enc += String.fromCodePoint(\n        uint6ToB64(nUint24 >>> 18 & 63),\n        uint6ToB64(nUint24 >>> 12 & 63),\n        uint6ToB64(nUint24 >>> 6 & 63),\n        uint6ToB64(nUint24 & 63)\n      );\n      nUint24 = 0;\n    }\n  }\n  return sB64Enc.slice(0, sB64Enc.length - 2 + nMod3) + (nMod3 === 2 ? \"\" : nMod3 === 1 ? \"=\" : \"==\");\n}\n\n// src/hex.ts\nfunction fromHEX(hexStr) {\n  const normalized = hexStr.startsWith(\"0x\") ? hexStr.slice(2) : hexStr;\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;\n  const intArr = padded.match(/.{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];\n  return Uint8Array.from(intArr);\n}\nfunction toHEX(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\n\n// src/uleb.ts\nfunction ulebEncode(num) {\n  let arr = [];\n  let len = 0;\n  if (num === 0) {\n    return [0];\n  }\n  while (num > 0) {\n    arr[len] = num & 127;\n    if (num >>= 7) {\n      arr[len] |= 128;\n    }\n    len += 1;\n  }\n  return arr;\n}\nfunction ulebDecode(arr) {\n  let total = 0;\n  let shift = 0;\n  let len = 0;\n  while (true) {\n    let byte = arr[len];\n    len += 1;\n    total |= (byte & 127) << shift;\n    if ((byte & 128) === 0) {\n      break;\n    }\n    shift += 7;\n  }\n  return {\n    value: total,\n    length: len\n  };\n}\n\n// src/reader.ts\nvar BcsReader = class {\n  /**\n   * @param {Uint8Array} data Data to use as a buffer.\n   */\n  constructor(data) {\n    this.bytePosition = 0;\n    this.dataView = new DataView(data.buffer);\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Read U8 value from the buffer and shift cursor by 1.\n   * @returns\n   */\n  read8() {\n    let value = this.dataView.getUint8(this.bytePosition);\n    this.shift(1);\n    return value;\n  }\n  /**\n   * Read U16 value from the buffer and shift cursor by 2.\n   * @returns\n   */\n  read16() {\n    let value = this.dataView.getUint16(this.bytePosition, true);\n    this.shift(2);\n    return value;\n  }\n  /**\n   * Read U32 value from the buffer and shift cursor by 4.\n   * @returns\n   */\n  read32() {\n    let value = this.dataView.getUint32(this.bytePosition, true);\n    this.shift(4);\n    return value;\n  }\n  /**\n   * Read U64 value from the buffer and shift cursor by 8.\n   * @returns\n   */\n  read64() {\n    let value1 = this.read32();\n    let value2 = this.read32();\n    let result = value2.toString(16) + value1.toString(16).padStart(8, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 16.\n   */\n  read128() {\n    let value1 = BigInt(this.read64());\n    let value2 = BigInt(this.read64());\n    let result = value2.toString(16) + value1.toString(16).padStart(16, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 32.\n   * @returns\n   */\n  read256() {\n    let value1 = BigInt(this.read128());\n    let value2 = BigInt(this.read128());\n    let result = value2.toString(16) + value1.toString(16).padStart(32, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read `num` number of bytes from the buffer and shift cursor by `num`.\n   * @param num Number of bytes to read.\n   */\n  readBytes(num) {\n    let start = this.bytePosition + this.dataView.byteOffset;\n    let value = new Uint8Array(this.dataView.buffer, start, num);\n    this.shift(num);\n    return value;\n  }\n  /**\n   * Read ULEB value - an integer of varying size. Used for enum indexes and\n   * vector lengths.\n   * @returns {Number} The ULEB value.\n   */\n  readULEB() {\n    let start = this.bytePosition + this.dataView.byteOffset;\n    let buffer = new Uint8Array(this.dataView.buffer, start);\n    let { value, length } = ulebDecode(buffer);\n    this.shift(length);\n    return value;\n  }\n  /**\n   * Read a BCS vector: read a length and then apply function `cb` X times\n   * where X is the length of the vector, defined as ULEB in BCS bytes.\n   * @param cb Callback to process elements of vector.\n   * @returns {Array<Any>} Array of the resulting values, returned by callback.\n   */\n  readVec(cb) {\n    let length = this.readULEB();\n    let result = [];\n    for (let i = 0; i < length; i++) {\n      result.push(cb(this, i, length));\n    }\n    return result;\n  }\n};\n\n// src/utils.ts\nfunction encodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return toB58(data);\n    case \"base64\":\n      return toB64(data);\n    case \"hex\":\n      return toHEX(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction decodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return fromB58(data);\n    case \"base64\":\n      return fromB64(data);\n    case \"hex\":\n      return fromHEX(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction splitGenericParameters(str, genericSeparators = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n  tok.push(word.trim());\n  return tok;\n}\n\n// src/writer.ts\nvar BcsWriter = class {\n  constructor({ size = 1024, maxSize, allocateSize = 1024 } = {}) {\n    this.bytePosition = 0;\n    this.size = size;\n    this.maxSize = maxSize || size;\n    this.allocateSize = allocateSize;\n    this.dataView = new DataView(new ArrayBuffer(size));\n  }\n  ensureSizeOrGrow(bytes) {\n    const requiredSize = this.bytePosition + bytes;\n    if (requiredSize > this.size) {\n      const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);\n      if (requiredSize > nextSize) {\n        throw new Error(\n          `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`\n        );\n      }\n      this.size = nextSize;\n      const nextBuffer = new ArrayBuffer(this.size);\n      new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));\n      this.dataView = new DataView(nextBuffer);\n    }\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Write a U8 value into a buffer and shift cursor position by 1.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write8(value) {\n    this.ensureSizeOrGrow(1);\n    this.dataView.setUint8(this.bytePosition, Number(value));\n    return this.shift(1);\n  }\n  /**\n   * Write a U16 value into a buffer and shift cursor position by 2.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write16(value) {\n    this.ensureSizeOrGrow(2);\n    this.dataView.setUint16(this.bytePosition, Number(value), true);\n    return this.shift(2);\n  }\n  /**\n   * Write a U32 value into a buffer and shift cursor position by 4.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write32(value) {\n    this.ensureSizeOrGrow(4);\n    this.dataView.setUint32(this.bytePosition, Number(value), true);\n    return this.shift(4);\n  }\n  /**\n   * Write a U64 value into a buffer and shift cursor position by 8.\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write64(value) {\n    toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U128 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write128(value) {\n    toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U256 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write256(value) {\n    toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a ULEB value into a buffer and shift cursor position by number of bytes\n   * written.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  writeULEB(value) {\n    ulebEncode(value).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a vector into a buffer by first writing the vector length and then calling\n   * a callback on each passed value.\n   *\n   * @param {Array<Any>} vector Array of elements to write.\n   * @param {WriteVecCb} cb Callback to call on each element of the vector.\n   * @returns {this}\n   */\n  writeVec(vector, cb) {\n    this.writeULEB(vector.length);\n    Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));\n    return this;\n  }\n  /**\n   * Adds support for iterations over the object.\n   * @returns {Uint8Array}\n   */\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.bytePosition; i++) {\n      yield this.dataView.getUint8(i);\n    }\n    return this.toBytes();\n  }\n  /**\n   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).\n   * @returns {Uint8Array} Resulting bcs.\n   */\n  toBytes() {\n    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));\n  }\n  /**\n   * Represent data as 'hex' or 'base64'\n   * @param encoding Encoding to use: 'base64' or 'hex'\n   */\n  toString(encoding) {\n    return encodeStr(this.toBytes(), encoding);\n  }\n};\nfunction toLittleEndian(bigint, size) {\n  let result = new Uint8Array(size);\n  let i = 0;\n  while (bigint > 0) {\n    result[i] = Number(bigint % BigInt(256));\n    bigint = bigint / BigInt(256);\n    i += 1;\n  }\n  return result;\n}\n\n// src/bcs-type.ts\nvar _write, _serialize;\nvar _BcsType = class _BcsType {\n  constructor(options) {\n    __privateAdd(this, _write, void 0);\n    __privateAdd(this, _serialize, void 0);\n    this.name = options.name;\n    this.read = options.read;\n    this.serializedSize = options.serializedSize ?? (() => null);\n    __privateSet(this, _write, options.write);\n    __privateSet(this, _serialize, options.serialize ?? ((value, options2) => {\n      const writer = new BcsWriter({ size: this.serializedSize(value) ?? void 0, ...options2 });\n      __privateGet(this, _write).call(this, value, writer);\n      return writer.toBytes();\n    }));\n    this.validate = options.validate ?? (() => {\n    });\n  }\n  write(value, writer) {\n    this.validate(value);\n    __privateGet(this, _write).call(this, value, writer);\n  }\n  serialize(value, options) {\n    this.validate(value);\n    return new SerializedBcs(this, __privateGet(this, _serialize).call(this, value, options));\n  }\n  parse(bytes) {\n    const reader = new BcsReader(bytes);\n    return this.read(reader);\n  }\n  transform({\n    name,\n    input,\n    output\n  }) {\n    return new _BcsType({\n      name: name ?? this.name,\n      read: (reader) => output(this.read(reader)),\n      write: (value, writer) => __privateGet(this, _write).call(this, input(value), writer),\n      serializedSize: (value) => this.serializedSize(input(value)),\n      serialize: (value, options) => __privateGet(this, _serialize).call(this, input(value), options),\n      validate: (value) => this.validate(input(value))\n    });\n  }\n};\n_write = new WeakMap();\n_serialize = new WeakMap();\nvar BcsType = _BcsType;\nvar SERIALIZED_BCS_BRAND = Symbol.for(\"@mysten/serialized-bcs\");\nfunction isSerializedBcs(obj) {\n  return !!obj && typeof obj === \"object\" && obj[SERIALIZED_BCS_BRAND] === true;\n}\nvar _schema, _bytes;\nvar SerializedBcs = class {\n  constructor(type, schema) {\n    __privateAdd(this, _schema, void 0);\n    __privateAdd(this, _bytes, void 0);\n    __privateSet(this, _schema, type);\n    __privateSet(this, _bytes, schema);\n  }\n  // Used to brand SerializedBcs so that they can be identified, even between multiple copies\n  // of the @mysten/bcs package are installed\n  get [SERIALIZED_BCS_BRAND]() {\n    return true;\n  }\n  toBytes() {\n    return __privateGet(this, _bytes);\n  }\n  toHex() {\n    return toHEX(__privateGet(this, _bytes));\n  }\n  toBase64() {\n    return toB64(__privateGet(this, _bytes));\n  }\n  toBase58() {\n    return toB58(__privateGet(this, _bytes));\n  }\n  parse() {\n    return __privateGet(this, _schema).parse(__privateGet(this, _bytes));\n  }\n};\n_schema = new WeakMap();\n_bytes = new WeakMap();\nfunction fixedSizeBcsType({\n  size,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    serializedSize: () => size\n  });\n}\nfunction uIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](value),\n    validate: (value) => {\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction bigUIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](BigInt(value)),\n    validate: (val) => {\n      const value = BigInt(val);\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction dynamicSizeBcsType({\n  serialize,\n  ...options\n}) {\n  const type = new BcsType({\n    ...options,\n    serialize,\n    write: (value, writer) => {\n      for (const byte of type.serialize(value).toBytes()) {\n        writer.write8(byte);\n      }\n    }\n  });\n  return type;\n}\nfunction stringLikeBcsType({\n  toBytes,\n  fromBytes,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    read: (reader) => {\n      const length = reader.readULEB();\n      const bytes = reader.readBytes(length);\n      return fromBytes(bytes);\n    },\n    write: (hex, writer) => {\n      const bytes = toBytes(hex);\n      writer.writeULEB(bytes.length);\n      for (let i = 0; i < bytes.length; i++) {\n        writer.write8(bytes[i]);\n      }\n    },\n    serialize: (value) => {\n      const bytes = toBytes(value);\n      const size = ulebEncode(bytes.length);\n      const result = new Uint8Array(size.length + bytes.length);\n      result.set(size, 0);\n      result.set(bytes, size.length);\n      return result;\n    },\n    validate: (value) => {\n      if (typeof value !== \"string\") {\n        throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction lazyBcsType(cb) {\n  let lazyType = null;\n  function getType() {\n    if (!lazyType) {\n      lazyType = cb();\n    }\n    return lazyType;\n  }\n  return new BcsType({\n    name: \"lazy\",\n    read: (data) => getType().read(data),\n    serializedSize: (value) => getType().serializedSize(value),\n    write: (value, writer) => getType().write(value, writer),\n    serialize: (value, options) => getType().serialize(value, options).toBytes()\n  });\n}\n\n// src/bcs.ts\nvar bcs = {\n  /**\n   * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.\n   * @example\n   * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]\n   */\n  u8(options) {\n    return uIntBcsType({\n      name: \"u8\",\n      readMethod: \"read8\",\n      writeMethod: \"write8\",\n      size: 1,\n      maxValue: 2 ** 8 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.\n   * @example\n   * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]\n   */\n  u16(options) {\n    return uIntBcsType({\n      name: \"u16\",\n      readMethod: \"read16\",\n      writeMethod: \"write16\",\n      size: 2,\n      maxValue: 2 ** 16 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.\n   * @example\n   * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]\n   */\n  u32(options) {\n    return uIntBcsType({\n      name: \"u32\",\n      readMethod: \"read32\",\n      writeMethod: \"write32\",\n      size: 4,\n      maxValue: 2 ** 32 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.\n   * @example\n   * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]\n   */\n  u64(options) {\n    return bigUIntBcsType({\n      name: \"u64\",\n      readMethod: \"read64\",\n      writeMethod: \"write64\",\n      size: 8,\n      maxValue: 2n ** 64n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.\n   * @example\n   * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u128(options) {\n    return bigUIntBcsType({\n      name: \"u128\",\n      readMethod: \"read128\",\n      writeMethod: \"write128\",\n      size: 16,\n      maxValue: 2n ** 128n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.\n   * @example\n   * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u256(options) {\n    return bigUIntBcsType({\n      name: \"u256\",\n      readMethod: \"read256\",\n      writeMethod: \"write256\",\n      size: 32,\n      maxValue: 2n ** 256n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write boolean values.\n   * @example\n   * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]\n   */\n  bool(options) {\n    return fixedSizeBcsType({\n      name: \"bool\",\n      size: 1,\n      read: (reader) => reader.read8() === 1,\n      write: (value, writer) => writer.write8(value ? 1 : 0),\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"boolean\") {\n          throw new TypeError(`Expected boolean, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write unsigned LEB encoded integers\n   * @example\n   *\n   */\n  uleb128(options) {\n    return dynamicSizeBcsType({\n      name: \"uleb128\",\n      read: (reader) => reader.readULEB(),\n      serialize: (value) => {\n        return Uint8Array.from(ulebEncode(value));\n      },\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a fixed length byte array\n   * @param size The number of bytes this types represents\n   * @example\n   * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]\n   */\n  bytes(size, options) {\n    return fixedSizeBcsType({\n      name: `bytes[${size}]`,\n      size,\n      read: (reader) => reader.readBytes(size),\n      write: (value, writer) => {\n        for (let i = 0; i < size; i++) {\n          writer.write8(value[i] ?? 0);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded\n   * @example\n   * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]\n   */\n  string(options) {\n    return stringLikeBcsType({\n      name: \"string\",\n      toBytes: (value) => new TextEncoder().encode(value),\n      fromBytes: (bytes) => new TextDecoder().decode(bytes),\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that represents a fixed length array of a given type\n   * @param size The number of elements in the array\n   * @param type The BcsType of each element in the array\n   * @example\n   * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]\n   */\n  fixedArray(size, type, options) {\n    return new BcsType({\n      name: `${type.name}[${size}]`,\n      read: (reader) => {\n        const result = new Array(size);\n        for (let i = 0; i < size; i++) {\n          result[i] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const item of value) {\n          type.write(item, writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing an optional value\n   * @param type The BcsType of the optional value\n   * @example\n   * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]\n   * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]\n   */\n  option(type) {\n    return bcs.enum(`Option<${type.name}>`, {\n      None: null,\n      Some: type\n    }).transform({\n      input: (value) => {\n        if (value == null) {\n          return { None: true };\n        }\n        return { Some: value };\n      },\n      output: (value) => {\n        if (\"Some\" in value) {\n          return value.Some;\n        }\n        return null;\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a variable length vector of a given type\n   * @param type The BcsType of each element in the vector\n   *\n   * @example\n   * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]\n   */\n  vector(type, options) {\n    return new BcsType({\n      name: `vector<${type.name}>`,\n      read: (reader) => {\n        const length = reader.readULEB();\n        const result = new Array(length);\n        for (let i = 0; i < length; i++) {\n          result[i] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        writer.writeULEB(value.length);\n        for (const item of value) {\n          type.write(item, writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a tuple of a given set of types\n   * @param types The BcsTypes for each element in the tuple\n   *\n   * @example\n   * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])\n   * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]\n   */\n  tuple(types, options) {\n    return new BcsType({\n      name: `(${types.map((t) => t.name).join(\", \")})`,\n      serializedSize: (values) => {\n        let total = 0;\n        for (let i = 0; i < types.length; i++) {\n          const size = types[i].serializedSize(values[i]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = [];\n        for (const type of types) {\n          result.push(type.read(reader));\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (let i = 0; i < types.length; i++) {\n          types[i].write(value[i], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!Array.isArray(value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== types.length) {\n          throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a struct of a given set of fields\n   * @param name The name of the struct\n   * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized\n   *\n   * @example\n   * const struct = bcs.struct('MyStruct', {\n   *  a: bcs.u8(),\n   *  b: bcs.string(),\n   * })\n   * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   */\n  struct(name, fields, options) {\n    const canonicalOrder = Object.entries(fields);\n    return new BcsType({\n      name,\n      serializedSize: (values) => {\n        let total = 0;\n        for (const [field, type] of canonicalOrder) {\n          const size = type.serializedSize(values[field]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = {};\n        for (const [field, type] of canonicalOrder) {\n          result[field] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const [field, type] of canonicalOrder) {\n          type.write(value[field], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing an enum of a given set of options\n   * @param name The name of the enum\n   * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.\n   * null can be used to represent a variant with no data.\n   *\n   * @example\n   * const enum = bcs.enum('MyEnum', {\n   *   A: bcs.u8(),\n   *   B: bcs.string(),\n   *   C: null,\n   * })\n   * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]\n   * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]\n   */\n  enum(name, values, options) {\n    const canonicalOrder = Object.entries(values);\n    return new BcsType({\n      name,\n      read: (reader) => {\n        const index = reader.readULEB();\n        const [name2, type] = canonicalOrder[index];\n        return {\n          [name2]: type?.read(reader) ?? true\n        };\n      },\n      write: (value, writer) => {\n        const [name2, val] = Object.entries(value)[0];\n        for (let i = 0; i < canonicalOrder.length; i++) {\n          const [optionName, optionType] = canonicalOrder[i];\n          if (optionName === name2) {\n            writer.writeULEB(i);\n            optionType?.write(val, writer);\n            return;\n          }\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n        const keys = Object.keys(value);\n        if (keys.length !== 1) {\n          throw new TypeError(`Expected object with one key, found ${keys.length}`);\n        }\n        const [name2] = keys;\n        if (!Object.hasOwn(values, name2)) {\n          throw new TypeError(`Invalid enum variant ${name2}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a map of a given key and value type\n   * @param keyType The BcsType of the key\n   * @param valueType The BcsType of the value\n   * @example\n   * const map = bcs.map(bcs.u8(), bcs.string())\n   * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]\n   */\n  map(keyType, valueType) {\n    return bcs.vector(bcs.tuple([keyType, valueType])).transform({\n      name: `Map<${keyType.name}, ${valueType.name}>`,\n      input: (value) => {\n        return [...value.entries()];\n      },\n      output: (value) => {\n        const result = /* @__PURE__ */ new Map();\n        for (const [key, val] of value) {\n          result.set(key, val);\n        }\n        return result;\n      }\n    });\n  },\n  /**\n   * @deprecated\n   *\n   * Generics should be implemented as generic typescript functions instead:\n   *\n   * ```ts\n   * function VecMap<K, V>, (K: BcsType<K>, V: BcsType<V>) {\n   *   return bcs.struct('VecMap<K, V>', {\n   *     keys: bcs.vector(K),\n   *     values: bcs.vector(V),\n   *   })\n   * }\n   * ```\n   */\n  generic(names, cb) {\n    return (...types) => {\n      return cb(...types).transform({\n        name: `${cb.name}<${types.map((t) => t.name).join(\", \")}>`,\n        input: (value) => value,\n        output: (value) => value\n      });\n    };\n  },\n  /**\n   * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.\n   * @param cb A callback that returns the BcsType\n   */\n  lazy(cb) {\n    return lazyBcsType(cb);\n  }\n};\n\n// src/legacy-registry.ts\nvar SUI_ADDRESS_LENGTH = 32;\nvar _BCS = class _BCS {\n  /**\n   * Construct a BCS instance with a prepared schema.\n   *\n   * @param schema A prepared schema with type definitions\n   * @param withPrimitives Whether to register primitive types by default\n   */\n  constructor(schema) {\n    /**\n     * Map of kind `TypeName => TypeInterface`. Holds all\n     * callbacks for (de)serialization of every registered type.\n     *\n     * If the value stored is a string, it is treated as an alias.\n     */\n    this.types = /* @__PURE__ */ new Map();\n    /**\n     * Count temp keys to generate a new one when requested.\n     */\n    this.counter = 0;\n    if (schema instanceof _BCS) {\n      this.schema = schema.schema;\n      this.types = new Map(schema.types);\n      return;\n    }\n    this.schema = schema;\n    this.registerAddressType(_BCS.ADDRESS, schema.addressLength, schema.addressEncoding);\n    this.registerVectorType(schema.vectorType);\n    if (schema.types && schema.types.structs) {\n      for (let name of Object.keys(schema.types.structs)) {\n        this.registerStructType(name, schema.types.structs[name]);\n      }\n    }\n    if (schema.types && schema.types.enums) {\n      for (let name of Object.keys(schema.types.enums)) {\n        this.registerEnumType(name, schema.types.enums[name]);\n      }\n    }\n    if (schema.types && schema.types.aliases) {\n      for (let name of Object.keys(schema.types.aliases)) {\n        this.registerAlias(name, schema.types.aliases[name]);\n      }\n    }\n    if (schema.withPrimitives !== false) {\n      registerPrimitives(this);\n    }\n  }\n  /**\n   * Name of the key to use for temporary struct definitions.\n   * Returns a temp key + index (for a case when multiple temp\n   * structs are processed).\n   */\n  tempKey() {\n    return `bcs-struct-${++this.counter}`;\n  }\n  /**\n   * Serialize data into bcs.\n   *\n   * @example\n   * bcs.registerVectorType('vector<u8>', 'u8');\n   *\n   * let serialized = BCS\n   *   .set('vector<u8>', [1,2,3,4,5,6])\n   *   .toBytes();\n   *\n   * console.assert(toHex(serialized) === '06010203040506');\n   *\n   * @param type Name of the type to serialize (must be registered) or a struct type.\n   * @param data Data to serialize.\n   * @param size Serialization buffer size. Default 1024 = 1KB.\n   * @return A BCS reader instance. Usually you'd want to call `.toBytes()`\n   */\n  ser(type, data, options) {\n    if (typeof type === \"string\" || Array.isArray(type)) {\n      const { name, params } = this.parseTypeName(type);\n      return this.getTypeInterface(name).encode(this, data, options, params);\n    }\n    if (typeof type === \"object\") {\n      const key = this.tempKey();\n      const temp = new _BCS(this);\n      return temp.registerStructType(key, type).ser(key, data, options);\n    }\n    throw new Error(`Incorrect type passed into the '.ser()' function. \n${JSON.stringify(type)}`);\n  }\n  /**\n   * Deserialize BCS into a JS type.\n   *\n   * @example\n   * let num = bcs.ser('u64', '4294967295').toString('hex');\n   * let deNum = bcs.de('u64', num, 'hex');\n   * console.assert(deNum.toString(10) === '4294967295');\n   *\n   * @param type Name of the type to deserialize (must be registered) or a struct type definition.\n   * @param data Data to deserialize.\n   * @param encoding Optional - encoding to use if data is of type String\n   * @return Deserialized data.\n   */\n  de(type, data, encoding) {\n    if (typeof data === \"string\") {\n      if (encoding) {\n        data = decodeStr(data, encoding);\n      } else {\n        throw new Error(\"To pass a string to `bcs.de`, specify encoding\");\n      }\n    }\n    if (typeof type === \"string\" || Array.isArray(type)) {\n      const { name, params } = this.parseTypeName(type);\n      return this.getTypeInterface(name).decode(this, data, params);\n    }\n    if (typeof type === \"object\") {\n      const temp = new _BCS(this);\n      const key = this.tempKey();\n      return temp.registerStructType(key, type).de(key, data, encoding);\n    }\n    throw new Error(`Incorrect type passed into the '.de()' function. \n${JSON.stringify(type)}`);\n  }\n  /**\n   * Check whether a `TypeInterface` has been loaded for a `type`.\n   * @param type Name of the type to check.\n   * @returns\n   */\n  hasType(type) {\n    return this.types.has(type);\n  }\n  /**\n   * Create an alias for a type.\n   * WARNING: this can potentially lead to recursion\n   * @param name Alias to use\n   * @param forType Type to reference\n   * @returns\n   *\n   * @example\n   * ```\n   * let bcs = new BCS(getSuiMoveConfig());\n   * bcs.registerAlias('ObjectDigest', BCS.BASE58);\n   * let b58_digest = bcs.de('ObjectDigest', '<digest_bytes>', 'base64');\n   * ```\n   */\n  registerAlias(name, forType) {\n    this.types.set(name, forType);\n    return this;\n  }\n  /**\n   * Method to register new types for BCS internal representation.\n   * For each registered type 2 callbacks must be specified and one is optional:\n   *\n   * - encodeCb(writer, data) - write a way to serialize data with BcsWriter;\n   * - decodeCb(reader) - write a way to deserialize data with BcsReader;\n   * - validateCb(data) - validate data - either return bool or throw an error\n   *\n   * @example\n   * // our type would be a string that consists only of numbers\n   * bcs.registerType('number_string',\n   *    (writer, data) => writer.writeVec(data, (w, el) => w.write8(el)),\n   *    (reader) => reader.readVec((r) => r.read8()).join(''), // read each value as u8\n   *    (value) => /[0-9]+/.test(value) // test that it has at least one digit\n   * );\n   * console.log(Array.from(bcs.ser('number_string', '12345').toBytes()) == [5,1,2,3,4,5]);\n   *\n   * @param name\n   * @param encodeCb Callback to encode a value.\n   * @param decodeCb Callback to decode a value.\n   * @param validateCb Optional validator Callback to check type before serialization.\n   */\n  registerType(typeName, encodeCb, decodeCb, validateCb = () => true) {\n    const { name, params: generics } = this.parseTypeName(typeName);\n    this.types.set(name, {\n      encode(self, data, options, typeParams) {\n        const typeMap = generics.reduce((acc, value, index) => {\n          return Object.assign(acc, { [value]: typeParams[index] });\n        }, {});\n        return this._encodeRaw.call(self, new BcsWriter(options), data, typeParams, typeMap);\n      },\n      decode(self, data, typeParams) {\n        const typeMap = generics.reduce((acc, value, index) => {\n          return Object.assign(acc, { [value]: typeParams[index] });\n        }, {});\n        return this._decodeRaw.call(self, new BcsReader(data), typeParams, typeMap);\n      },\n      // these methods should always be used with caution as they require pre-defined\n      // reader and writer and mainly exist to allow multi-field (de)serialization;\n      _encodeRaw(writer, data, typeParams, typeMap) {\n        if (validateCb(data)) {\n          return encodeCb.call(this, writer, data, typeParams, typeMap);\n        } else {\n          throw new Error(`Validation failed for type ${name}, data: ${data}`);\n        }\n      },\n      _decodeRaw(reader, typeParams, typeMap) {\n        return decodeCb.call(this, reader, typeParams, typeMap);\n      }\n    });\n    return this;\n  }\n  /**\n  \t * Method to register BcsType instances to the registry\n  \t * Types are registered with a callback that provides BcsType instances for each generic\n  \t * passed to the type.\n  \t *\n  \t * - createType(...generics) - Return a BcsType instance\n  \t *\n  \t * @example\n  \t * // our type would be a string that consists only of numbers\n  \t * bcs.registerType('Box<T>', (T) => {\n  \t * \t\treturn bcs.struct({\n  \t * \t\t\tvalue: T\n  \t * \t\t});\n  \t * });\n  \n  \t * console.log(Array.from(bcs.ser('Box<string>', '12345').toBytes()) == [5,1,2,3,4,5]);\n  \t *\n  \t * @param name\n  \t * @param createType a Callback to create the BcsType with any passed in generics\n  \t */\n  registerBcsType(typeName, createType) {\n    this.registerType(\n      typeName,\n      (writer, data, typeParams) => {\n        const generics = typeParams.map(\n          (param) => new BcsType({\n            name: String(param),\n            write: (data2, writer2) => {\n              const { name, params } = this.parseTypeName(param);\n              const typeInterface = this.getTypeInterface(name);\n              const typeMap = params.reduce((acc, value, index) => {\n                return Object.assign(acc, { [value]: typeParams[index] });\n              }, {});\n              return typeInterface._encodeRaw.call(this, writer2, data2, params, typeMap);\n            },\n            read: () => {\n              throw new Error(\"Not implemented\");\n            }\n          })\n        );\n        createType(...generics).write(data, writer);\n        return writer;\n      },\n      (reader, typeParams) => {\n        const generics = typeParams.map(\n          (param) => new BcsType({\n            name: String(param),\n            write: (data, writer) => {\n              throw new Error(\"Not implemented\");\n            },\n            read: (reader2) => {\n              const { name, params } = this.parseTypeName(param);\n              const typeInterface = this.getTypeInterface(name);\n              const typeMap = params.reduce((acc, value, index) => {\n                return Object.assign(acc, { [value]: typeParams[index] });\n              }, {});\n              return typeInterface._decodeRaw.call(this, reader2, params, typeMap);\n            }\n          })\n        );\n        return createType(...generics).read(reader);\n      }\n    );\n    return this;\n  }\n  /**\n   * Register an address type which is a sequence of U8s of specified length.\n   * @example\n   * bcs.registerAddressType('address', SUI_ADDRESS_LENGTH);\n   * let addr = bcs.de('address', 'c3aca510c785c7094ac99aeaa1e69d493122444df50bb8a99dfa790c654a79af');\n   *\n   * @param name Name of the address type.\n   * @param length Byte length of the address.\n   * @param encoding Encoding to use for the address type\n   * @returns\n   */\n  registerAddressType(name, length, encoding = \"hex\") {\n    switch (encoding) {\n      case \"base64\":\n        return this.registerType(\n          name,\n          function encodeAddress(writer, data) {\n            return fromB64(data).reduce((writer2, el) => writer2.write8(el), writer);\n          },\n          function decodeAddress(reader) {\n            return toB64(reader.readBytes(length));\n          }\n        );\n      case \"hex\":\n        return this.registerType(\n          name,\n          function encodeAddress(writer, data) {\n            return fromHEX(data).reduce((writer2, el) => writer2.write8(el), writer);\n          },\n          function decodeAddress(reader) {\n            return toHEX(reader.readBytes(length));\n          }\n        );\n      default:\n        throw new Error(\"Unsupported encoding! Use either hex or base64\");\n    }\n  }\n  /**\n   * Register custom vector type inside the bcs.\n   *\n   * @example\n   * bcs.registerVectorType('vector<T>'); // generic registration\n   * let array = bcs.de('vector<u8>', '06010203040506', 'hex'); // [1,2,3,4,5,6];\n   * let again = bcs.ser('vector<u8>', [1,2,3,4,5,6]).toString('hex');\n   *\n   * @param name Name of the type to register\n   * @param elementType Optional name of the inner type of the vector\n   * @return Returns self for chaining.\n   */\n  registerVectorType(typeName) {\n    let { name, params } = this.parseTypeName(typeName);\n    if (params.length > 1) {\n      throw new Error(\"Vector can have only one type parameter; got \" + name);\n    }\n    return this.registerType(\n      typeName,\n      function encodeVector(writer, data, typeParams, typeMap) {\n        return writer.writeVec(data, (writer2, el) => {\n          let elementType = typeParams[0];\n          if (!elementType) {\n            throw new Error(`Incorrect number of type parameters passed a to vector '${typeName}'`);\n          }\n          let { name: name2, params: params2 } = this.parseTypeName(elementType);\n          if (this.hasType(name2)) {\n            return this.getTypeInterface(name2)._encodeRaw.call(this, writer2, el, params2, typeMap);\n          }\n          if (!(name2 in typeMap)) {\n            throw new Error(\n              `Unable to find a matching type definition for ${name2} in vector; make sure you passed a generic`\n            );\n          }\n          let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name2]);\n          return this.getTypeInterface(innerName)._encodeRaw.call(\n            this,\n            writer2,\n            el,\n            innerParams,\n            typeMap\n          );\n        });\n      },\n      function decodeVector(reader, typeParams, typeMap) {\n        return reader.readVec((reader2) => {\n          let elementType = typeParams[0];\n          if (!elementType) {\n            throw new Error(`Incorrect number of type parameters passed to a vector '${typeName}'`);\n          }\n          let { name: name2, params: params2 } = this.parseTypeName(elementType);\n          if (this.hasType(name2)) {\n            return this.getTypeInterface(name2)._decodeRaw.call(this, reader2, params2, typeMap);\n          }\n          if (!(name2 in typeMap)) {\n            throw new Error(\n              `Unable to find a matching type definition for ${name2} in vector; make sure you passed a generic`\n            );\n          }\n          let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name2]);\n          return this.getTypeInterface(innerName)._decodeRaw.call(\n            this,\n            reader2,\n            innerParams,\n            typeMap\n          );\n        });\n      }\n    );\n  }\n  /**\n   * Safe method to register a custom Move struct. The first argument is a name of the\n   * struct which is only used on the FrontEnd and has no affect on serialization results,\n   * and the second is a struct description passed as an Object.\n   *\n   * The description object MUST have the same order on all of the platforms (ie in Move\n   * or in Rust).\n   *\n   * @example\n   * // Move / Rust struct\n   * // struct Coin {\n   * //   value: u64,\n   * //   owner: vector<u8>, // name // Vec<u8> in Rust\n   * //   is_locked: bool,\n   * // }\n   *\n   * bcs.registerStructType('Coin', {\n   *   value: bcs.U64,\n   *   owner: bcs.STRING,\n   *   is_locked: bcs.BOOL\n   * });\n   *\n   * // Created in Rust with diem/bcs\n   * // let rust_bcs_str = '80d1b105600000000e4269672057616c6c65742047757900';\n   * let rust_bcs_str = [ // using an Array here as BCS works with Uint8Array\n   *  128, 209, 177,   5,  96,  0,  0,\n   *    0,  14,  66, 105, 103, 32, 87,\n   *   97, 108, 108, 101, 116, 32, 71,\n   *  117, 121,   0\n   * ];\n   *\n   * // Let's encode the value as well\n   * let test_set = bcs.ser('Coin', {\n   *   owner: 'Big Wallet Guy',\n   *   value: '412412400000',\n   *   is_locked: false,\n   * });\n   *\n   * console.assert(Array.from(test_set.toBytes()) === rust_bcs_str, 'Whoopsie, result mismatch');\n   *\n   * @param name Name of the type to register.\n   * @param fields Fields of the struct. Must be in the correct order.\n   * @return Returns BCS for chaining.\n   */\n  registerStructType(typeName, fields) {\n    for (let key in fields) {\n      let internalName = this.tempKey();\n      let value = fields[key];\n      if (!Array.isArray(value) && typeof value !== \"string\") {\n        fields[key] = internalName;\n        this.registerStructType(internalName, value);\n      }\n    }\n    let struct = Object.freeze(fields);\n    let canonicalOrder = Object.keys(struct);\n    let { name: structName, params: generics } = this.parseTypeName(typeName);\n    return this.registerType(\n      typeName,\n      function encodeStruct(writer, data, typeParams, typeMap) {\n        if (!data || data.constructor !== Object) {\n          throw new Error(`Expected ${structName} to be an Object, got: ${data}`);\n        }\n        if (typeParams.length !== generics.length) {\n          throw new Error(\n            `Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`\n          );\n        }\n        for (let key of canonicalOrder) {\n          if (!(key in data)) {\n            throw new Error(`Struct ${structName} requires field ${key}:${struct[key]}`);\n          }\n          const { name: fieldType, params: fieldParams } = this.parseTypeName(\n            struct[key]\n          );\n          if (!generics.includes(fieldType)) {\n            this.getTypeInterface(fieldType)._encodeRaw.call(\n              this,\n              writer,\n              data[key],\n              fieldParams,\n              typeMap\n            );\n          } else {\n            const paramIdx = generics.indexOf(fieldType);\n            let { name, params } = this.parseTypeName(typeParams[paramIdx]);\n            if (this.hasType(name)) {\n              this.getTypeInterface(name)._encodeRaw.call(\n                this,\n                writer,\n                data[key],\n                params,\n                typeMap\n              );\n              continue;\n            }\n            if (!(name in typeMap)) {\n              throw new Error(\n                `Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`\n              );\n            }\n            let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n            this.getTypeInterface(innerName)._encodeRaw.call(\n              this,\n              writer,\n              data[key],\n              innerParams,\n              typeMap\n            );\n          }\n        }\n        return writer;\n      },\n      function decodeStruct(reader, typeParams, typeMap) {\n        if (typeParams.length !== generics.length) {\n          throw new Error(\n            `Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`\n          );\n        }\n        let result = {};\n        for (let key of canonicalOrder) {\n          const { name: fieldName, params: fieldParams } = this.parseTypeName(\n            struct[key]\n          );\n          if (!generics.includes(fieldName)) {\n            result[key] = this.getTypeInterface(fieldName)._decodeRaw.call(\n              this,\n              reader,\n              fieldParams,\n              typeMap\n            );\n          } else {\n            const paramIdx = generics.indexOf(fieldName);\n            let { name, params } = this.parseTypeName(typeParams[paramIdx]);\n            if (this.hasType(name)) {\n              result[key] = this.getTypeInterface(name)._decodeRaw.call(\n                this,\n                reader,\n                params,\n                typeMap\n              );\n              continue;\n            }\n            if (!(name in typeMap)) {\n              throw new Error(\n                `Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`\n              );\n            }\n            let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n            result[key] = this.getTypeInterface(innerName)._decodeRaw.call(\n              this,\n              reader,\n              innerParams,\n              typeMap\n            );\n          }\n        }\n        return result;\n      }\n    );\n  }\n  /**\n   * Safe method to register custom enum type where each invariant holds the value of another type.\n   * @example\n   * bcs.registerStructType('Coin', { value: 'u64' });\n   * bcs.registerEnumType('MyEnum', {\n   *  single: 'Coin',\n   *  multi: 'vector<Coin>',\n   *  empty: null\n   * });\n   *\n   * console.log(\n   *  bcs.de('MyEnum', 'AICWmAAAAAAA', 'base64'), // { single: { value: 10000000 } }\n   *  bcs.de('MyEnum', 'AQIBAAAAAAAAAAIAAAAAAAAA', 'base64')  // { multi: [ { value: 1 }, { value: 2 } ] }\n   * )\n   *\n   * // and serialization\n   * bcs.ser('MyEnum', { single: { value: 10000000 } }).toBytes();\n   * bcs.ser('MyEnum', { multi: [ { value: 1 }, { value: 2 } ] });\n   *\n   * @param name\n   * @param variants\n   */\n  registerEnumType(typeName, variants) {\n    for (let key in variants) {\n      let internalName = this.tempKey();\n      let value = variants[key];\n      if (value !== null && !Array.isArray(value) && typeof value !== \"string\") {\n        variants[key] = internalName;\n        this.registerStructType(internalName, value);\n      }\n    }\n    let struct = Object.freeze(variants);\n    let canonicalOrder = Object.keys(struct);\n    let { name, params: canonicalTypeParams } = this.parseTypeName(typeName);\n    return this.registerType(\n      typeName,\n      function encodeEnum(writer, data, typeParams, typeMap) {\n        if (!data) {\n          throw new Error(`Unable to write enum \"${name}\", missing data.\nReceived: \"${data}\"`);\n        }\n        if (typeof data !== \"object\") {\n          throw new Error(\n            `Incorrect data passed into enum \"${name}\", expected object with properties: \"${canonicalOrder.join(\n              \" | \"\n            )}\".\nReceived: \"${JSON.stringify(data)}\"`\n          );\n        }\n        let key = Object.keys(data)[0];\n        if (key === void 0) {\n          throw new Error(`Empty object passed as invariant of the enum \"${name}\"`);\n        }\n        let orderByte = canonicalOrder.indexOf(key);\n        if (orderByte === -1) {\n          throw new Error(\n            `Unknown invariant of the enum \"${name}\", allowed values: \"${canonicalOrder.join(\n              \" | \"\n            )}\"; received \"${key}\"`\n          );\n        }\n        let invariant = canonicalOrder[orderByte];\n        let invariantType = struct[invariant];\n        writer.write8(orderByte);\n        if (invariantType === null) {\n          return writer;\n        }\n        let paramIndex = canonicalTypeParams.indexOf(invariantType);\n        let typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];\n        {\n          let { name: name2, params } = this.parseTypeName(typeOrParam);\n          return this.getTypeInterface(name2)._encodeRaw.call(\n            this,\n            writer,\n            data[key],\n            params,\n            typeMap\n          );\n        }\n      },\n      function decodeEnum(reader, typeParams, typeMap) {\n        let orderByte = reader.readULEB();\n        let invariant = canonicalOrder[orderByte];\n        let invariantType = struct[invariant];\n        if (orderByte === -1) {\n          throw new Error(\n            `Decoding type mismatch, expected enum \"${name}\" invariant index, received \"${orderByte}\"`\n          );\n        }\n        if (invariantType === null) {\n          return { [invariant]: true };\n        }\n        let paramIndex = canonicalTypeParams.indexOf(invariantType);\n        let typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];\n        {\n          let { name: name2, params } = this.parseTypeName(typeOrParam);\n          return {\n            [invariant]: this.getTypeInterface(name2)._decodeRaw.call(this, reader, params, typeMap)\n          };\n        }\n      }\n    );\n  }\n  /**\n   * Get a set of encoders/decoders for specific type.\n   * Mainly used to define custom type de/serialization logic.\n   *\n   * @param type\n   * @returns {TypeInterface}\n   */\n  getTypeInterface(type) {\n    let typeInterface = this.types.get(type);\n    if (typeof typeInterface === \"string\") {\n      let chain = [];\n      while (typeof typeInterface === \"string\") {\n        if (chain.includes(typeInterface)) {\n          throw new Error(`Recursive definition found: ${chain.join(\" -> \")} -> ${typeInterface}`);\n        }\n        chain.push(typeInterface);\n        typeInterface = this.types.get(typeInterface);\n      }\n    }\n    if (typeInterface === void 0) {\n      throw new Error(`Type ${type} is not registered`);\n    }\n    return typeInterface;\n  }\n  /**\n   * Parse a type name and get the type's generics.\n   * @example\n   * let { typeName, typeParams } = parseTypeName('Option<Coin<SUI>>');\n   * // typeName: Option\n   * // typeParams: [ 'Coin<SUI>' ]\n   *\n   * @param name Name of the type to process\n   * @returns Object with typeName and typeParams listed as Array\n   */\n  parseTypeName(name) {\n    if (Array.isArray(name)) {\n      let [typeName2, ...params2] = name;\n      return { name: typeName2, params: params2 };\n    }\n    if (typeof name !== \"string\") {\n      throw new Error(`Illegal type passed as a name of the type: ${name}`);\n    }\n    let [left, right] = this.schema.genericSeparators || [\"<\", \">\"];\n    let l_bound = name.indexOf(left);\n    let r_bound = Array.from(name).reverse().indexOf(right);\n    if (l_bound === -1 && r_bound === -1) {\n      return { name, params: [] };\n    }\n    if (l_bound === -1 || r_bound === -1) {\n      throw new Error(`Unclosed generic in name '${name}'`);\n    }\n    let typeName = name.slice(0, l_bound);\n    let params = splitGenericParameters(\n      name.slice(l_bound + 1, name.length - r_bound - 1),\n      this.schema.genericSeparators\n    );\n    return { name: typeName, params };\n  }\n};\n// Predefined types constants\n_BCS.U8 = \"u8\";\n_BCS.U16 = \"u16\";\n_BCS.U32 = \"u32\";\n_BCS.U64 = \"u64\";\n_BCS.U128 = \"u128\";\n_BCS.U256 = \"u256\";\n_BCS.BOOL = \"bool\";\n_BCS.VECTOR = \"vector\";\n_BCS.ADDRESS = \"address\";\n_BCS.STRING = \"string\";\n_BCS.HEX = \"hex-string\";\n_BCS.BASE58 = \"base58-string\";\n_BCS.BASE64 = \"base64-string\";\nvar BCS = _BCS;\nfunction registerPrimitives(bcs2) {\n  bcs2.registerType(\n    BCS.U8,\n    function(writer, data) {\n      return writer.write8(data);\n    },\n    function(reader) {\n      return reader.read8();\n    },\n    (u8) => u8 < 256\n  );\n  bcs2.registerType(\n    BCS.U16,\n    function(writer, data) {\n      return writer.write16(data);\n    },\n    function(reader) {\n      return reader.read16();\n    },\n    (u16) => u16 < 65536\n  );\n  bcs2.registerType(\n    BCS.U32,\n    function(writer, data) {\n      return writer.write32(data);\n    },\n    function(reader) {\n      return reader.read32();\n    },\n    (u32) => u32 <= 4294967296n\n  );\n  bcs2.registerType(\n    BCS.U64,\n    function(writer, data) {\n      return writer.write64(data);\n    },\n    function(reader) {\n      return reader.read64();\n    }\n  );\n  bcs2.registerType(\n    BCS.U128,\n    function(writer, data) {\n      return writer.write128(data);\n    },\n    function(reader) {\n      return reader.read128();\n    }\n  );\n  bcs2.registerType(\n    BCS.U256,\n    function(writer, data) {\n      return writer.write256(data);\n    },\n    function(reader) {\n      return reader.read256();\n    }\n  );\n  bcs2.registerType(\n    BCS.BOOL,\n    function(writer, data) {\n      return writer.write8(data);\n    },\n    function(reader) {\n      return reader.read8().toString(10) === \"1\";\n    }\n  );\n  bcs2.registerType(\n    BCS.STRING,\n    function(writer, data) {\n      return writer.writeVec(Array.from(data), (writer2, el) => writer2.write8(el.charCodeAt(0)));\n    },\n    function(reader) {\n      return reader.readVec((reader2) => reader2.read8()).map((el) => String.fromCharCode(Number(el))).join(\"\");\n    },\n    (_str) => true\n  );\n  bcs2.registerType(\n    BCS.HEX,\n    function(writer, data) {\n      return writer.writeVec(Array.from(fromHEX(data)), (writer2, el) => writer2.write8(el));\n    },\n    function(reader) {\n      let bytes = reader.readVec((reader2) => reader2.read8());\n      return toHEX(new Uint8Array(bytes));\n    }\n  );\n  bcs2.registerType(\n    BCS.BASE58,\n    function(writer, data) {\n      return writer.writeVec(Array.from(fromB58(data)), (writer2, el) => writer2.write8(el));\n    },\n    function(reader) {\n      let bytes = reader.readVec((reader2) => reader2.read8());\n      return toB58(new Uint8Array(bytes));\n    }\n  );\n  bcs2.registerType(\n    BCS.BASE64,\n    function(writer, data) {\n      return writer.writeVec(Array.from(fromB64(data)), (writer2, el) => writer2.write8(el));\n    },\n    function(reader) {\n      let bytes = reader.readVec((reader2) => reader2.read8());\n      return toB64(new Uint8Array(bytes));\n    }\n  );\n}\nfunction getRustConfig() {\n  return {\n    genericSeparators: [\"<\", \">\"],\n    vectorType: \"Vec\",\n    addressLength: SUI_ADDRESS_LENGTH,\n    addressEncoding: \"hex\"\n  };\n}\nfunction getSuiMoveConfig() {\n  return {\n    genericSeparators: [\"<\", \">\"],\n    vectorType: \"vector\",\n    addressLength: SUI_ADDRESS_LENGTH,\n    addressEncoding: \"hex\"\n  };\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js":
/*!***************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeTagSerializer: () => (/* reexport safe */ _type_tag_serializer_js__WEBPACK_IMPORTED_MODULE_2__.TypeTagSerializer),\n/* harmony export */   bcs: () => (/* binding */ suiBcs),\n/* harmony export */   bcsRegistry: () => (/* binding */ bcsRegistry),\n/* harmony export */   isPureArg: () => (/* binding */ isPureArg)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _type_tag_serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-tag-serializer.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/type-tag-serializer.js\");\n\n\n\n\nfunction isPureArg(arg) {\n  return arg.Pure !== void 0;\n}\nconst bcsRegistry = new _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.BCS({\n  ...(0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.getSuiMoveConfig)(),\n  types: {\n    enums: {\n      \"Option<T>\": {\n        None: null,\n        Some: \"T\"\n      }\n    }\n  }\n});\nfunction unsafe_u64(options) {\n  return _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u64({\n    name: \"unsafe_u64\",\n    ...options\n  }).transform({\n    input: (val) => val,\n    output: (val) => Number(val)\n  });\n}\nfunction optionEnum(type) {\n  return _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"Option\", {\n    None: null,\n    Some: type\n  });\n}\nfunction enumKind(type) {\n  return type.transform({\n    input: (val) => ({\n      [val.kind]: val\n    }),\n    output: (val) => {\n      const key = Object.keys(val)[0];\n      return { kind: key, ...val[key] };\n    }\n  });\n}\nconst Address = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.bytes(_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.SUI_ADDRESS_LENGTH).transform({\n  input: (val) => typeof val === \"string\" ? (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.fromHEX)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(val)) : val,\n  output: (val) => (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)((0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.toHEX)(val))\n});\nconst ObjectDigest = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()).transform({\n  name: \"ObjectDigest\",\n  input: (value) => (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.fromB58)(value),\n  output: (value) => (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.toB58)(new Uint8Array(value))\n});\nconst SuiObjectRef = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"SuiObjectRef\", {\n  objectId: Address,\n  version: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u64(),\n  digest: ObjectDigest\n});\nconst SharedObjectRef = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"SharedObjectRef\", {\n  objectId: Address,\n  initialSharedVersion: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u64(),\n  mutable: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.bool()\n});\nconst ObjectArg = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"ObjectArg\", {\n  ImmOrOwned: SuiObjectRef,\n  Shared: SharedObjectRef,\n  Receiving: SuiObjectRef\n});\nconst CallArg = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"CallArg\", {\n  Pure: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  Object: ObjectArg,\n  ObjVec: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(ObjectArg)\n});\nconst TypeTag = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"TypeTag\", {\n  bool: null,\n  u8: null,\n  u64: null,\n  u128: null,\n  address: null,\n  signer: null,\n  vector: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.lazy(() => TypeTag),\n  struct: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.lazy(() => StructTag),\n  u16: null,\n  u32: null,\n  u256: null\n});\nconst Argument = enumKind(\n  _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"Argument\", {\n    GasCoin: null,\n    Input: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"Input\", { index: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16() }),\n    Result: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"Result\", { index: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16() }),\n    NestedResult: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"NestedResult\", { index: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16(), resultIndex: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16() })\n  })\n);\nconst ProgrammableMoveCall = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"ProgrammableMoveCall\", {\n  package: Address,\n  module: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.string(),\n  function: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.string(),\n  type_arguments: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(TypeTag),\n  arguments: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Argument)\n}).transform({\n  input: (data) => {\n    const [pkg, module, fun] = data.target.split(\"::\");\n    const type_arguments = data.typeArguments.map(\n      (tag) => _type_tag_serializer_js__WEBPACK_IMPORTED_MODULE_2__.TypeTagSerializer.parseFromStr(tag, true)\n    );\n    return {\n      package: (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(pkg),\n      module,\n      function: fun,\n      type_arguments,\n      arguments: data.arguments\n    };\n  },\n  output: (data) => {\n    return {\n      target: [data.package, data.module, data.function].join(\n        \"::\"\n      ),\n      arguments: data.arguments,\n      typeArguments: data.type_arguments.map(_type_tag_serializer_js__WEBPACK_IMPORTED_MODULE_2__.TypeTagSerializer.tagToString)\n    };\n  }\n});\nconst Transaction = enumKind(\n  _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"Transaction\", {\n    /**\n     * A Move Call - any public Move function can be called via\n     * this transaction. The results can be used that instant to pass\n     * into the next transaction.\n     */\n    MoveCall: ProgrammableMoveCall,\n    /**\n     * Transfer vector of objects to a receiver.\n     */\n    TransferObjects: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"TransferObjects\", {\n      objects: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Argument),\n      address: Argument\n    }),\n    /**\n     * Split `amount` from a `coin`.\n     */\n    SplitCoins: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"SplitCoins\", { coin: Argument, amounts: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Argument) }),\n    /**\n     * Merge Vector of Coins (`sources`) into a `destination`.\n     */\n    MergeCoins: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"MergeCoins\", { destination: Argument, sources: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Argument) }),\n    /**\n     * Publish a Move module.\n     */\n    Publish: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"Publish\", {\n      modules: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8())),\n      dependencies: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Address)\n    }),\n    /**\n     * Build a vector of objects using the input arguments.\n     * It is impossible to construct a `vector<T: key>` otherwise,\n     * so this call serves a utility function.\n     */\n    MakeMoveVec: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"MakeMoveVec\", {\n      type: optionEnum(TypeTag),\n      objects: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Argument)\n    }),\n    /**  */\n    Upgrade: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"Upgrade\", {\n      modules: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8())),\n      dependencies: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Address),\n      packageId: Address,\n      ticket: Argument\n    })\n  })\n);\nconst ProgrammableTransaction = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"ProgrammableTransaction\", {\n  inputs: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(CallArg),\n  transactions: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(Transaction)\n});\nconst TransactionKind = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"TransactionKind\", {\n  ProgrammableTransaction,\n  ChangeEpoch: null,\n  Genesis: null,\n  ConsensusCommitPrologue: null\n});\nconst TransactionExpiration = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"TransactionExpiration\", {\n  None: null,\n  Epoch: unsafe_u64()\n});\nconst StructTag = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"StructTag\", {\n  address: Address,\n  module: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.string(),\n  name: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.string(),\n  typeParams: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(TypeTag)\n});\nconst GasData = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"GasData\", {\n  payment: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(SuiObjectRef),\n  owner: Address,\n  price: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u64(),\n  budget: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u64()\n});\nconst TransactionDataV1 = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"TransactionDataV1\", {\n  kind: TransactionKind,\n  sender: Address,\n  gasData: GasData,\n  expiration: TransactionExpiration\n});\nconst TransactionData = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"TransactionData\", {\n  V1: TransactionDataV1\n});\nconst SenderSignedData = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"SenderSignedData\", {\n  data: TransactionData,\n  txSignatures: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()))\n});\nconst CompressedSignature = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"CompressedSignature\", {\n  ED25519: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.fixedArray(64, _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  Secp256k1: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.fixedArray(64, _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  Secp256r1: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.fixedArray(64, _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  ZkLogin: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8())\n});\nconst PublicKey = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.enum(\"PublicKey\", {\n  ED25519: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.fixedArray(32, _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  Secp256k1: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.fixedArray(33, _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  Secp256r1: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.fixedArray(33, _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()),\n  ZkLogin: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8())\n});\nconst MultiSigPkMap = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"MultiSigPkMap\", {\n  pubKey: PublicKey,\n  weight: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8()\n});\nconst MultiSigPublicKey = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"MultiSigPublicKey\", {\n  pk_map: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(MultiSigPkMap),\n  threshold: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16()\n});\nconst MultiSig = _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.struct(\"MultiSig\", {\n  sigs: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.vector(CompressedSignature),\n  bitmap: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16(),\n  multisig_pk: MultiSigPublicKey\n});\nconst suiBcs = {\n  ..._mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs,\n  U8: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u8(),\n  U16: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u16(),\n  U32: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u32(),\n  U64: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u64(),\n  U128: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u128(),\n  U256: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.u256(),\n  ULEB128: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.uleb128(),\n  Bool: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.bool(),\n  String: _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.string(),\n  Address,\n  Argument,\n  CallArg,\n  CompressedSignature,\n  GasData,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  Transaction,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag,\n  // preserve backwards compatibility with old bcs export\n  ser: bcsRegistry.ser.bind(bcsRegistry),\n  de: bcsRegistry.de.bind(bcsRegistry),\n  getTypeInterface: bcsRegistry.getTypeInterface.bind(bcsRegistry),\n  hasType: bcsRegistry.hasType.bind(bcsRegistry),\n  parseTypeName: bcsRegistry.parseTypeName.bind(bcsRegistry),\n  registerAddressType: bcsRegistry.registerAddressType.bind(bcsRegistry),\n  registerAlias: bcsRegistry.registerAlias.bind(bcsRegistry),\n  registerBcsType: bcsRegistry.registerBcsType.bind(bcsRegistry),\n  registerEnumType: bcsRegistry.registerEnumType.bind(bcsRegistry),\n  registerStructType: bcsRegistry.registerStructType.bind(bcsRegistry),\n  registerType: bcsRegistry.registerType.bind(bcsRegistry),\n  types: bcsRegistry.types\n};\nbcsRegistry.registerBcsType(\"utf8string\", () => _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.bcs.string({ name: \"utf8string\" }));\nbcsRegistry.registerBcsType(\"unsafe_u64\", () => unsafe_u64());\nbcsRegistry.registerBcsType(\"enumKind\", (T) => enumKind(T));\n[\n  Address,\n  Argument,\n  CallArg,\n  CompressedSignature,\n  GasData,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  Transaction,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag\n].forEach((type) => {\n  bcsRegistry.registerBcsType(type.name, () => type);\n});\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/type-tag-serializer.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/bcs/type-tag-serializer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeTagSerializer: () => (/* binding */ TypeTagSerializer)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\nclass TypeTagSerializer {\n  static parseFromStr(str, normalizeAddress = false) {\n    if (str === \"address\") {\n      return { address: null };\n    } else if (str === \"bool\") {\n      return { bool: null };\n    } else if (str === \"u8\") {\n      return { u8: null };\n    } else if (str === \"u16\") {\n      return { u16: null };\n    } else if (str === \"u32\") {\n      return { u32: null };\n    } else if (str === \"u64\") {\n      return { u64: null };\n    } else if (str === \"u128\") {\n      return { u128: null };\n    } else if (str === \"u256\") {\n      return { u256: null };\n    } else if (str === \"signer\") {\n      return { signer: null };\n    }\n    const vectorMatch = str.match(VECTOR_REGEX);\n    if (vectorMatch) {\n      return {\n        vector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)\n      };\n    }\n    const structMatch = str.match(STRUCT_REGEX);\n    if (structMatch) {\n      const address = normalizeAddress ? (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiAddress)(structMatch[1]) : structMatch[1];\n      return {\n        struct: {\n          address,\n          module: structMatch[2],\n          name: structMatch[3],\n          typeParams: structMatch[5] === void 0 ? [] : TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)\n        }\n      };\n    }\n    throw new Error(`Encountered unexpected token when parsing type args for ${str}`);\n  }\n  static parseStructTypeArgs(str, normalizeAddress = false) {\n    return (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_1__.splitGenericParameters)(str).map(\n      (tok) => TypeTagSerializer.parseFromStr(tok, normalizeAddress)\n    );\n  }\n  static tagToString(tag) {\n    if (\"bool\" in tag) {\n      return \"bool\";\n    }\n    if (\"u8\" in tag) {\n      return \"u8\";\n    }\n    if (\"u16\" in tag) {\n      return \"u16\";\n    }\n    if (\"u32\" in tag) {\n      return \"u32\";\n    }\n    if (\"u64\" in tag) {\n      return \"u64\";\n    }\n    if (\"u128\" in tag) {\n      return \"u128\";\n    }\n    if (\"u256\" in tag) {\n      return \"u256\";\n    }\n    if (\"address\" in tag) {\n      return \"address\";\n    }\n    if (\"signer\" in tag) {\n      return \"signer\";\n    }\n    if (\"vector\" in tag) {\n      return `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n    }\n    if (\"struct\" in tag) {\n      const struct = tag.struct;\n      const typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(\", \");\n      return `${struct.address}::${struct.module}::${struct.name}${typeParams ? `<${typeParams}>` : \"\"}`;\n    }\n    throw new Error(\"Invalid TypeTag\");\n  }\n}\n\n//# sourceMappingURL=type-tag-serializer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2Jjcy90eXBlLXRhZy1zZXJpYWxpemVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUNPO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsTUFBTTtBQUNOLGVBQWU7QUFDZixNQUFNO0FBQ04sZUFBZTtBQUNmLE1BQU07QUFDTixlQUFlO0FBQ2YsTUFBTTtBQUNOLGVBQWU7QUFDZixNQUFNO0FBQ04sZUFBZTtBQUNmLE1BQU07QUFDTixlQUFlO0FBQ2YsTUFBTTtBQUNOLGVBQWU7QUFDZixNQUFNO0FBQ04sZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyx3RUFBbUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLElBQUk7QUFDbkY7QUFDQTtBQUNBLFdBQVcsbUVBQXNCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMENBQTBDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGVBQWUsSUFBSSxjQUFjLElBQUksWUFBWSxFQUFFLGlCQUFpQixXQUFXLFFBQVE7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb3dubG9hZHMvbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2Jjcy90eXBlLXRhZy1zZXJpYWxpemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwbGl0R2VuZXJpY1BhcmFtZXRlcnMgfSBmcm9tIFwiQG15c3Rlbi9iY3NcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVN1aUFkZHJlc3MgfSBmcm9tIFwiLi4vdXRpbHMvc3VpLXR5cGVzLmpzXCI7XG5jb25zdCBWRUNUT1JfUkVHRVggPSAvXnZlY3RvcjwoLispPiQvO1xuY29uc3QgU1RSVUNUX1JFR0VYID0gL14oW146XSspOjooW146XSspOjooW148XSspKDwoLispPik/LztcbmNsYXNzIFR5cGVUYWdTZXJpYWxpemVyIHtcbiAgc3RhdGljIHBhcnNlRnJvbVN0cihzdHIsIG5vcm1hbGl6ZUFkZHJlc3MgPSBmYWxzZSkge1xuICAgIGlmIChzdHIgPT09IFwiYWRkcmVzc1wiKSB7XG4gICAgICByZXR1cm4geyBhZGRyZXNzOiBudWxsIH07XG4gICAgfSBlbHNlIGlmIChzdHIgPT09IFwiYm9vbFwiKSB7XG4gICAgICByZXR1cm4geyBib29sOiBudWxsIH07XG4gICAgfSBlbHNlIGlmIChzdHIgPT09IFwidThcIikge1xuICAgICAgcmV0dXJuIHsgdTg6IG51bGwgfTtcbiAgICB9IGVsc2UgaWYgKHN0ciA9PT0gXCJ1MTZcIikge1xuICAgICAgcmV0dXJuIHsgdTE2OiBudWxsIH07XG4gICAgfSBlbHNlIGlmIChzdHIgPT09IFwidTMyXCIpIHtcbiAgICAgIHJldHVybiB7IHUzMjogbnVsbCB9O1xuICAgIH0gZWxzZSBpZiAoc3RyID09PSBcInU2NFwiKSB7XG4gICAgICByZXR1cm4geyB1NjQ6IG51bGwgfTtcbiAgICB9IGVsc2UgaWYgKHN0ciA9PT0gXCJ1MTI4XCIpIHtcbiAgICAgIHJldHVybiB7IHUxMjg6IG51bGwgfTtcbiAgICB9IGVsc2UgaWYgKHN0ciA9PT0gXCJ1MjU2XCIpIHtcbiAgICAgIHJldHVybiB7IHUyNTY6IG51bGwgfTtcbiAgICB9IGVsc2UgaWYgKHN0ciA9PT0gXCJzaWduZXJcIikge1xuICAgICAgcmV0dXJuIHsgc2lnbmVyOiBudWxsIH07XG4gICAgfVxuICAgIGNvbnN0IHZlY3Rvck1hdGNoID0gc3RyLm1hdGNoKFZFQ1RPUl9SRUdFWCk7XG4gICAgaWYgKHZlY3Rvck1hdGNoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2ZWN0b3I6IFR5cGVUYWdTZXJpYWxpemVyLnBhcnNlRnJvbVN0cih2ZWN0b3JNYXRjaFsxXSwgbm9ybWFsaXplQWRkcmVzcylcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHN0cnVjdE1hdGNoID0gc3RyLm1hdGNoKFNUUlVDVF9SRUdFWCk7XG4gICAgaWYgKHN0cnVjdE1hdGNoKSB7XG4gICAgICBjb25zdCBhZGRyZXNzID0gbm9ybWFsaXplQWRkcmVzcyA/IG5vcm1hbGl6ZVN1aUFkZHJlc3Moc3RydWN0TWF0Y2hbMV0pIDogc3RydWN0TWF0Y2hbMV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHJ1Y3Q6IHtcbiAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgIG1vZHVsZTogc3RydWN0TWF0Y2hbMl0sXG4gICAgICAgICAgbmFtZTogc3RydWN0TWF0Y2hbM10sXG4gICAgICAgICAgdHlwZVBhcmFtczogc3RydWN0TWF0Y2hbNV0gPT09IHZvaWQgMCA/IFtdIDogVHlwZVRhZ1NlcmlhbGl6ZXIucGFyc2VTdHJ1Y3RUeXBlQXJncyhzdHJ1Y3RNYXRjaFs1XSwgbm9ybWFsaXplQWRkcmVzcylcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFbmNvdW50ZXJlZCB1bmV4cGVjdGVkIHRva2VuIHdoZW4gcGFyc2luZyB0eXBlIGFyZ3MgZm9yICR7c3RyfWApO1xuICB9XG4gIHN0YXRpYyBwYXJzZVN0cnVjdFR5cGVBcmdzKHN0ciwgbm9ybWFsaXplQWRkcmVzcyA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHNwbGl0R2VuZXJpY1BhcmFtZXRlcnMoc3RyKS5tYXAoXG4gICAgICAodG9rKSA9PiBUeXBlVGFnU2VyaWFsaXplci5wYXJzZUZyb21TdHIodG9rLCBub3JtYWxpemVBZGRyZXNzKVxuICAgICk7XG4gIH1cbiAgc3RhdGljIHRhZ1RvU3RyaW5nKHRhZykge1xuICAgIGlmIChcImJvb2xcIiBpbiB0YWcpIHtcbiAgICAgIHJldHVybiBcImJvb2xcIjtcbiAgICB9XG4gICAgaWYgKFwidThcIiBpbiB0YWcpIHtcbiAgICAgIHJldHVybiBcInU4XCI7XG4gICAgfVxuICAgIGlmIChcInUxNlwiIGluIHRhZykge1xuICAgICAgcmV0dXJuIFwidTE2XCI7XG4gICAgfVxuICAgIGlmIChcInUzMlwiIGluIHRhZykge1xuICAgICAgcmV0dXJuIFwidTMyXCI7XG4gICAgfVxuICAgIGlmIChcInU2NFwiIGluIHRhZykge1xuICAgICAgcmV0dXJuIFwidTY0XCI7XG4gICAgfVxuICAgIGlmIChcInUxMjhcIiBpbiB0YWcpIHtcbiAgICAgIHJldHVybiBcInUxMjhcIjtcbiAgICB9XG4gICAgaWYgKFwidTI1NlwiIGluIHRhZykge1xuICAgICAgcmV0dXJuIFwidTI1NlwiO1xuICAgIH1cbiAgICBpZiAoXCJhZGRyZXNzXCIgaW4gdGFnKSB7XG4gICAgICByZXR1cm4gXCJhZGRyZXNzXCI7XG4gICAgfVxuICAgIGlmIChcInNpZ25lclwiIGluIHRhZykge1xuICAgICAgcmV0dXJuIFwic2lnbmVyXCI7XG4gICAgfVxuICAgIGlmIChcInZlY3RvclwiIGluIHRhZykge1xuICAgICAgcmV0dXJuIGB2ZWN0b3I8JHtUeXBlVGFnU2VyaWFsaXplci50YWdUb1N0cmluZyh0YWcudmVjdG9yKX0+YDtcbiAgICB9XG4gICAgaWYgKFwic3RydWN0XCIgaW4gdGFnKSB7XG4gICAgICBjb25zdCBzdHJ1Y3QgPSB0YWcuc3RydWN0O1xuICAgICAgY29uc3QgdHlwZVBhcmFtcyA9IHN0cnVjdC50eXBlUGFyYW1zLm1hcChUeXBlVGFnU2VyaWFsaXplci50YWdUb1N0cmluZykuam9pbihcIiwgXCIpO1xuICAgICAgcmV0dXJuIGAke3N0cnVjdC5hZGRyZXNzfTo6JHtzdHJ1Y3QubW9kdWxlfTo6JHtzdHJ1Y3QubmFtZX0ke3R5cGVQYXJhbXMgPyBgPCR7dHlwZVBhcmFtc30+YCA6IFwiXCJ9YDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBUeXBlVGFnXCIpO1xuICB9XG59XG5leHBvcnQge1xuICBUeXBlVGFnU2VyaWFsaXplclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGUtdGFnLXNlcmlhbGl6ZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/type-tag-serializer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Inputs.js":
/*!********************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/Inputs.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuilderCallArg: () => (/* binding */ BuilderCallArg),\n/* harmony export */   Inputs: () => (/* binding */ Inputs),\n/* harmony export */   ObjectCallArg: () => (/* binding */ ObjectCallArg),\n/* harmony export */   PureCallArg: () => (/* binding */ PureCallArg),\n/* harmony export */   getIdFromCallArg: () => (/* binding */ getIdFromCallArg),\n/* harmony export */   getSharedObjectInput: () => (/* binding */ getSharedObjectInput),\n/* harmony export */   isMutableSharedObjectInput: () => (/* binding */ isMutableSharedObjectInput),\n/* harmony export */   isSharedObjectInput: () => (/* binding */ isSharedObjectInput)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bcs/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js\");\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/objects.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n\n\n\n\n\nconst ObjectArg = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ ImmOrOwned: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.SuiObjectRef }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    Shared: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n      objectId: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n      initialSharedVersion: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()]),\n      mutable: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)()\n    })\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ Receiving: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.SuiObjectRef })\n]);\nconst PureCallArg = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ Pure: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)()) });\nconst ObjectCallArg = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ Object: ObjectArg });\nconst BuilderCallArg = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([PureCallArg, ObjectCallArg]);\nfunction Pure(data, type) {\n  return {\n    Pure: Array.from(\n      data instanceof Uint8Array ? data : (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.isSerializedBcs)(data) ? data.toBytes() : (\n        // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n        _bcs_index_js__WEBPACK_IMPORTED_MODULE_3__.bcs.ser(type, data, { maxSize: Infinity }).toBytes()\n      )\n    )\n  };\n}\nconst Inputs = {\n  Pure,\n  ObjectRef({ objectId, digest, version }) {\n    return {\n      Object: {\n        ImmOrOwned: {\n          digest,\n          version,\n          objectId: (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(objectId)\n        }\n      }\n    };\n  },\n  SharedObjectRef({ objectId, mutable, initialSharedVersion }) {\n    return {\n      Object: {\n        Shared: {\n          mutable,\n          initialSharedVersion,\n          objectId: (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(objectId)\n        }\n      }\n    };\n  },\n  ReceivingRef({ objectId, digest, version }) {\n    return {\n      Object: {\n        Receiving: {\n          digest,\n          version,\n          objectId: (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(objectId)\n        }\n      }\n    };\n  }\n};\nfunction getIdFromCallArg(arg) {\n  if (typeof arg === \"string\") {\n    return (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(arg);\n  }\n  if (\"ImmOrOwned\" in arg.Object) {\n    return (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(arg.Object.ImmOrOwned.objectId);\n  }\n  if (\"Receiving\" in arg.Object) {\n    return (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(arg.Object.Receiving.objectId);\n  }\n  return (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_4__.normalizeSuiAddress)(arg.Object.Shared.objectId);\n}\nfunction getSharedObjectInput(arg) {\n  return typeof arg === \"object\" && \"Object\" in arg && \"Shared\" in arg.Object ? arg.Object.Shared : void 0;\n}\nfunction isSharedObjectInput(arg) {\n  return !!getSharedObjectInput(arg);\n}\nfunction isMutableSharedObjectInput(arg) {\n  return getSharedObjectInput(arg)?.mutable ?? false;\n}\n\n//# sourceMappingURL=Inputs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvSW5wdXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEM7QUFDK0I7QUFDdkM7QUFDVztBQUNXO0FBQzVELGtCQUFrQixrREFBSztBQUN2QixFQUFFLG1EQUFNLEdBQUcsWUFBWSx5REFBWSxFQUFFO0FBQ3JDLEVBQUUsbURBQU07QUFDUixZQUFZLG1EQUFNO0FBQ2xCLGdCQUFnQixtREFBTTtBQUN0Qiw0QkFBNEIsa0RBQUssRUFBRSxvREFBTyxJQUFJLG1EQUFNO0FBQ3BELGVBQWUsb0RBQU87QUFDdEIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLG1EQUFNLEdBQUcsV0FBVyx5REFBWSxFQUFFO0FBQ3BDO0FBQ0Esb0JBQW9CLG1EQUFNLEdBQUcsTUFBTSxrREFBSyxDQUFDLG9EQUFPLEtBQUs7QUFDckQsc0JBQXNCLG1EQUFNLEdBQUcsbUJBQW1CO0FBQ2xELHVCQUF1QixrREFBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsNERBQWU7QUFDekQ7QUFDQSxRQUFRLDhDQUFHLG1CQUFtQixtQkFBbUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYywyQkFBMkI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3RUFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILG9CQUFvQix5Q0FBeUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3RUFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGlCQUFpQiwyQkFBMkI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3RUFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdFQUFtQjtBQUM5QjtBQUNBO0FBQ0EsV0FBVyx3RUFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsd0VBQW1CO0FBQzlCO0FBQ0EsU0FBUyx3RUFBbUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb3dubG9hZHMvbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvSW5wdXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU2VyaWFsaXplZEJjcyB9IGZyb20gXCJAbXlzdGVuL2Jjc1wiO1xuaW1wb3J0IHsgYXJyYXksIGJvb2xlYW4sIGludGVnZXIsIG9iamVjdCwgc3RyaW5nLCB1bmlvbiB9IGZyb20gXCJzdXBlcnN0cnVjdFwiO1xuaW1wb3J0IHsgYmNzIH0gZnJvbSBcIi4uL2Jjcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU3VpT2JqZWN0UmVmIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBub3JtYWxpemVTdWlBZGRyZXNzIH0gZnJvbSBcIi4uL3V0aWxzL3N1aS10eXBlcy5qc1wiO1xuY29uc3QgT2JqZWN0QXJnID0gdW5pb24oW1xuICBvYmplY3QoeyBJbW1Pck93bmVkOiBTdWlPYmplY3RSZWYgfSksXG4gIG9iamVjdCh7XG4gICAgU2hhcmVkOiBvYmplY3Qoe1xuICAgICAgb2JqZWN0SWQ6IHN0cmluZygpLFxuICAgICAgaW5pdGlhbFNoYXJlZFZlcnNpb246IHVuaW9uKFtpbnRlZ2VyKCksIHN0cmluZygpXSksXG4gICAgICBtdXRhYmxlOiBib29sZWFuKClcbiAgICB9KVxuICB9KSxcbiAgb2JqZWN0KHsgUmVjZWl2aW5nOiBTdWlPYmplY3RSZWYgfSlcbl0pO1xuY29uc3QgUHVyZUNhbGxBcmcgPSBvYmplY3QoeyBQdXJlOiBhcnJheShpbnRlZ2VyKCkpIH0pO1xuY29uc3QgT2JqZWN0Q2FsbEFyZyA9IG9iamVjdCh7IE9iamVjdDogT2JqZWN0QXJnIH0pO1xuY29uc3QgQnVpbGRlckNhbGxBcmcgPSB1bmlvbihbUHVyZUNhbGxBcmcsIE9iamVjdENhbGxBcmddKTtcbmZ1bmN0aW9uIFB1cmUoZGF0YSwgdHlwZSkge1xuICByZXR1cm4ge1xuICAgIFB1cmU6IEFycmF5LmZyb20oXG4gICAgICBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSA/IGRhdGEgOiBpc1NlcmlhbGl6ZWRCY3MoZGF0YSkgPyBkYXRhLnRvQnl0ZXMoKSA6IChcbiAgICAgICAgLy8gTk9URTogV2UgZXhwbGljaXRseSBzZXQgdGhpcyB0byBiZSBncm93YWJsZSB0byBpbmZpbml0eSwgYmVjYXVzZSB3ZSBoYXZlIG1heFNpemUgdmFsaWRhdGlvbiBhdCB0aGUgYnVpbGRlci1sZXZlbDpcbiAgICAgICAgYmNzLnNlcih0eXBlLCBkYXRhLCB7IG1heFNpemU6IEluZmluaXR5IH0pLnRvQnl0ZXMoKVxuICAgICAgKVxuICAgIClcbiAgfTtcbn1cbmNvbnN0IElucHV0cyA9IHtcbiAgUHVyZSxcbiAgT2JqZWN0UmVmKHsgb2JqZWN0SWQsIGRpZ2VzdCwgdmVyc2lvbiB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIE9iamVjdDoge1xuICAgICAgICBJbW1Pck93bmVkOiB7XG4gICAgICAgICAgZGlnZXN0LFxuICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgb2JqZWN0SWQ6IG5vcm1hbGl6ZVN1aUFkZHJlc3Mob2JqZWN0SWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBTaGFyZWRPYmplY3RSZWYoeyBvYmplY3RJZCwgbXV0YWJsZSwgaW5pdGlhbFNoYXJlZFZlcnNpb24gfSkge1xuICAgIHJldHVybiB7XG4gICAgICBPYmplY3Q6IHtcbiAgICAgICAgU2hhcmVkOiB7XG4gICAgICAgICAgbXV0YWJsZSxcbiAgICAgICAgICBpbml0aWFsU2hhcmVkVmVyc2lvbixcbiAgICAgICAgICBvYmplY3RJZDogbm9ybWFsaXplU3VpQWRkcmVzcyhvYmplY3RJZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIFJlY2VpdmluZ1JlZih7IG9iamVjdElkLCBkaWdlc3QsIHZlcnNpb24gfSkge1xuICAgIHJldHVybiB7XG4gICAgICBPYmplY3Q6IHtcbiAgICAgICAgUmVjZWl2aW5nOiB7XG4gICAgICAgICAgZGlnZXN0LFxuICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgb2JqZWN0SWQ6IG5vcm1hbGl6ZVN1aUFkZHJlc3Mob2JqZWN0SWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0SWRGcm9tQ2FsbEFyZyhhcmcpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplU3VpQWRkcmVzcyhhcmcpO1xuICB9XG4gIGlmIChcIkltbU9yT3duZWRcIiBpbiBhcmcuT2JqZWN0KSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVN1aUFkZHJlc3MoYXJnLk9iamVjdC5JbW1Pck93bmVkLm9iamVjdElkKTtcbiAgfVxuICBpZiAoXCJSZWNlaXZpbmdcIiBpbiBhcmcuT2JqZWN0KSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVN1aUFkZHJlc3MoYXJnLk9iamVjdC5SZWNlaXZpbmcub2JqZWN0SWQpO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVTdWlBZGRyZXNzKGFyZy5PYmplY3QuU2hhcmVkLm9iamVjdElkKTtcbn1cbmZ1bmN0aW9uIGdldFNoYXJlZE9iamVjdElucHV0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJiBcIk9iamVjdFwiIGluIGFyZyAmJiBcIlNoYXJlZFwiIGluIGFyZy5PYmplY3QgPyBhcmcuT2JqZWN0LlNoYXJlZCA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGlzU2hhcmVkT2JqZWN0SW5wdXQoYXJnKSB7XG4gIHJldHVybiAhIWdldFNoYXJlZE9iamVjdElucHV0KGFyZyk7XG59XG5mdW5jdGlvbiBpc011dGFibGVTaGFyZWRPYmplY3RJbnB1dChhcmcpIHtcbiAgcmV0dXJuIGdldFNoYXJlZE9iamVjdElucHV0KGFyZyk/Lm11dGFibGUgPz8gZmFsc2U7XG59XG5leHBvcnQge1xuICBCdWlsZGVyQ2FsbEFyZyxcbiAgSW5wdXRzLFxuICBPYmplY3RDYWxsQXJnLFxuICBQdXJlQ2FsbEFyZyxcbiAgZ2V0SWRGcm9tQ2FsbEFyZyxcbiAgZ2V0U2hhcmVkT2JqZWN0SW5wdXQsXG4gIGlzTXV0YWJsZVNoYXJlZE9iamVjdElucHV0LFxuICBpc1NoYXJlZE9iamVjdElucHV0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5wdXRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Inputs.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlock.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlock.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionBlock: () => (/* binding */ TransactionBlock),\n/* harmony export */   isTransactionBlock: () => (/* binding */ isTransactionBlock)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../bcs/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js\");\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/normalized.js\");\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/objects.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/index.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _Inputs_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Inputs.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Inputs.js\");\n/* harmony import */ var _pure_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pure.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/pure.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./serializer.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/serializer.js\");\n/* harmony import */ var _TransactionBlockData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TransactionBlockData.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlockData.js\");\n/* harmony import */ var _Transactions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Transactions.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Transactions.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/utils.js\");\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _blockData, _input, input_fn, _normalizeTransactionArgument, normalizeTransactionArgument_fn, _getConfig, getConfig_fn, _validate, validate_fn, _prepareGasPayment, prepareGasPayment_fn, _prepareGasPrice, prepareGasPrice_fn, _prepareTransactions, prepareTransactions_fn, _prepare, prepare_fn;\n\n\n\n\n\n\n\n\n\n\n\n\nconst DefaultOfflineLimits = {\n  maxPureArgumentSize: 16 * 1024,\n  maxTxGas: 5e10,\n  maxGasObjects: 256,\n  maxTxSizeBytes: 128 * 1024\n};\nfunction createTransactionResult(index) {\n  const baseResult = { kind: \"Result\", index };\n  const nestedResults = [];\n  const nestedResultFor = (resultIndex) => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {\n    kind: \"NestedResult\",\n    index,\n    resultIndex\n  });\n  return new Proxy(baseResult, {\n    set() {\n      throw new Error(\n        \"The transaction result is a proxy, and does not support setting properties directly\"\n      );\n    },\n    // TODO: Instead of making this return a concrete argument, we should ideally\n    // make it reference-based (so that this gets resolved at build-time), which\n    // allows re-ordering transactions.\n    get(target, property) {\n      if (property in target) {\n        return Reflect.get(target, property);\n      }\n      if (property === Symbol.iterator) {\n        return function* () {\n          let i = 0;\n          while (true) {\n            yield nestedResultFor(i);\n            i++;\n          }\n        };\n      }\n      if (typeof property === \"symbol\")\n        return;\n      const resultIndex = parseInt(property, 10);\n      if (Number.isNaN(resultIndex) || resultIndex < 0)\n        return;\n      return nestedResultFor(resultIndex);\n    }\n  });\n}\nfunction isReceivingType(normalizedType) {\n  const tag = (0,_types_index_js__WEBPACK_IMPORTED_MODULE_0__.extractStructTag)(normalizedType);\n  if (tag) {\n    return tag.Struct.address === \"0x2\" && tag.Struct.module === \"transfer\" && tag.Struct.name === \"Receiving\";\n  }\n  return false;\n}\nfunction expectClient(options) {\n  if (!options.client) {\n    throw new Error(\n      `No provider passed to Transaction#build, but transaction data was not sufficient to build offline.`\n    );\n  }\n  return options.client;\n}\nconst TRANSACTION_BRAND = Symbol.for(\"@mysten/transaction\");\nconst LIMITS = {\n  // The maximum gas that is allowed.\n  maxTxGas: \"max_tx_gas\",\n  // The maximum number of gas objects that can be selected for one transaction.\n  maxGasObjects: \"max_gas_payment_objects\",\n  // The maximum size (in bytes) that the transaction can be:\n  maxTxSizeBytes: \"max_tx_size_bytes\",\n  // The maximum size (in bytes) that pure arguments can be:\n  maxPureArgumentSize: \"max_pure_argument_size\"\n};\nconst GAS_SAFE_OVERHEAD = 1000n;\nconst MAX_OBJECTS_PER_FETCH = 50;\nconst chunk = (arr, size) => Array.from(\n  { length: Math.ceil(arr.length / size) },\n  (_, i) => arr.slice(i * size, i * size + size)\n);\nfunction isTransactionBlock(obj) {\n  return !!obj && typeof obj === \"object\" && obj[TRANSACTION_BRAND] === true;\n}\nconst _TransactionBlock = class {\n  constructor(transaction) {\n    /**\n     * Dynamically create a new input, which is separate from the `input`. This is important\n     * for generated clients to be able to define unique inputs that are non-overlapping with the\n     * defined inputs.\n     *\n     * For `Uint8Array` type automatically convert the input into a `Pure` CallArg, since this\n     * is the format required for custom serialization.\n     *\n     */\n    __privateAdd(this, _input);\n    __privateAdd(this, _normalizeTransactionArgument);\n    __privateAdd(this, _getConfig);\n    __privateAdd(this, _validate);\n    // The current default is just picking _all_ coins we can which may not be ideal.\n    __privateAdd(this, _prepareGasPayment);\n    __privateAdd(this, _prepareGasPrice);\n    __privateAdd(this, _prepareTransactions);\n    /**\n     * Prepare the transaction by valdiating the transaction data and resolving all inputs\n     * so that it can be built into bytes.\n     */\n    __privateAdd(this, _prepare);\n    __privateAdd(this, _blockData, void 0);\n    __privateSet(this, _blockData, new _TransactionBlockData_js__WEBPACK_IMPORTED_MODULE_1__.TransactionBlockDataBuilder(\n      transaction ? transaction.blockData : void 0\n    ));\n  }\n  /**\n   * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n   * Supports either a byte array, or base64-encoded bytes.\n   */\n  static fromKind(serialized) {\n    const tx = new _TransactionBlock();\n    __privateSet(tx, _blockData, _TransactionBlockData_js__WEBPACK_IMPORTED_MODULE_1__.TransactionBlockDataBuilder.fromKindBytes(\n      typeof serialized === \"string\" ? (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.fromB64)(serialized) : serialized\n    ));\n    return tx;\n  }\n  /**\n   * Converts from a serialized transaction format to a `Transaction` class.\n   * There are two supported serialized formats:\n   * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n   * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n   */\n  static from(serialized) {\n    const tx = new _TransactionBlock();\n    if (typeof serialized !== \"string\" || !serialized.startsWith(\"{\")) {\n      __privateSet(tx, _blockData, _TransactionBlockData_js__WEBPACK_IMPORTED_MODULE_1__.TransactionBlockDataBuilder.fromBytes(\n        typeof serialized === \"string\" ? (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.fromB64)(serialized) : serialized\n      ));\n    } else {\n      __privateSet(tx, _blockData, _TransactionBlockData_js__WEBPACK_IMPORTED_MODULE_1__.TransactionBlockDataBuilder.restore(JSON.parse(serialized)));\n    }\n    return tx;\n  }\n  setSender(sender) {\n    __privateGet(this, _blockData).sender = sender;\n  }\n  /**\n   * Sets the sender only if it has not already been set.\n   * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n   */\n  setSenderIfNotSet(sender) {\n    if (!__privateGet(this, _blockData).sender) {\n      __privateGet(this, _blockData).sender = sender;\n    }\n  }\n  setExpiration(expiration) {\n    __privateGet(this, _blockData).expiration = expiration;\n  }\n  setGasPrice(price) {\n    __privateGet(this, _blockData).gasConfig.price = String(price);\n  }\n  setGasBudget(budget) {\n    __privateGet(this, _blockData).gasConfig.budget = String(budget);\n  }\n  setGasOwner(owner) {\n    __privateGet(this, _blockData).gasConfig.owner = owner;\n  }\n  setGasPayment(payments) {\n    __privateGet(this, _blockData).gasConfig.payment = payments.map((payment) => (0,superstruct__WEBPACK_IMPORTED_MODULE_3__.mask)(payment, _types_index_js__WEBPACK_IMPORTED_MODULE_4__.SuiObjectRef));\n  }\n  /** Get a snapshot of the transaction data, in JSON form: */\n  get blockData() {\n    return __privateGet(this, _blockData).snapshot();\n  }\n  // Used to brand transaction classes so that they can be identified, even between multiple copies\n  // of the builder.\n  get [TRANSACTION_BRAND]() {\n    return true;\n  }\n  // Temporary workaround for the wallet interface accidentally serializing transaction blocks via postMessage\n  get pure() {\n    Object.defineProperty(this, \"pure\", {\n      enumerable: false,\n      value: (0,_pure_js__WEBPACK_IMPORTED_MODULE_5__.createPure)((value, type) => {\n        if ((0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.isSerializedBcs)(value)) {\n          return __privateMethod(this, _input, input_fn).call(this, \"pure\", {\n            Pure: Array.from(value.toBytes())\n          });\n        }\n        return __privateMethod(this, _input, input_fn).call(this, \"pure\", value instanceof Uint8Array ? _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.Pure(value) : type ? _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.Pure(value, type) : value);\n      })\n    });\n    return this.pure;\n  }\n  /** Returns an argument for the gas coin, to be used in a transaction. */\n  get gas() {\n    return { kind: \"GasCoin\" };\n  }\n  /**\n   * Add a new object input to the transaction.\n   */\n  object(value) {\n    if (typeof value === \"object\" && \"kind\" in value) {\n      return value;\n    }\n    const id = (0,_Inputs_js__WEBPACK_IMPORTED_MODULE_6__.getIdFromCallArg)(value);\n    const inserted = __privateGet(this, _blockData).inputs.find(\n      (i) => i.type === \"object\" && id === (0,_Inputs_js__WEBPACK_IMPORTED_MODULE_6__.getIdFromCallArg)(i.value)\n    );\n    return inserted ?? __privateMethod(this, _input, input_fn).call(this, \"object\", typeof value === \"string\" ? (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_7__.normalizeSuiAddress)(value) : value);\n  }\n  /**\n   * Add a new object input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  objectRef(...args) {\n    return this.object(_Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.ObjectRef(...args));\n  }\n  /**\n   * Add a new receiving input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  receivingRef(...args) {\n    return this.object(_Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.ReceivingRef(...args));\n  }\n  /**\n   * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  sharedObjectRef(...args) {\n    return this.object(_Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.SharedObjectRef(...args));\n  }\n  /** Add a transaction to the transaction block. */\n  add(transaction) {\n    const index = __privateGet(this, _blockData).transactions.push(transaction);\n    return createTransactionResult(index - 1);\n  }\n  // Method shorthands:\n  splitCoins(coin, amounts) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.SplitCoins(\n        typeof coin === \"string\" ? this.object(coin) : coin,\n        amounts.map(\n          (amount) => typeof amount === \"number\" || typeof amount === \"bigint\" || typeof amount === \"string\" ? this.pure.u64(amount) : __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, amount)\n        )\n      )\n    );\n  }\n  mergeCoins(destination, sources) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.MergeCoins(\n        typeof destination === \"string\" ? this.object(destination) : destination,\n        sources.map((src) => typeof src === \"string\" ? this.object(src) : src)\n      )\n    );\n  }\n  publish({ modules, dependencies }) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.Publish({\n        modules,\n        dependencies\n      })\n    );\n  }\n  upgrade({\n    modules,\n    dependencies,\n    packageId,\n    ticket\n  }) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.Upgrade({\n        modules,\n        dependencies,\n        packageId,\n        ticket: typeof ticket === \"string\" ? this.object(ticket) : ticket\n      })\n    );\n  }\n  moveCall({\n    arguments: args,\n    typeArguments,\n    target\n  }) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.MoveCall({\n        arguments: args?.map((arg) => __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, arg)),\n        typeArguments,\n        target\n      })\n    );\n  }\n  transferObjects(objects, address) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.TransferObjects(\n        objects.map((obj) => typeof obj === \"string\" ? this.object(obj) : obj),\n        typeof address === \"string\" ? this.pure.address(address) : __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, address)\n      )\n    );\n  }\n  makeMoveVec({\n    type,\n    objects\n  }) {\n    return this.add(\n      _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.Transactions.MakeMoveVec({\n        type,\n        objects: objects.map((obj) => typeof obj === \"string\" ? this.object(obj) : obj)\n      })\n    );\n  }\n  /**\n   * Serialize the transaction to a string so that it can be sent to a separate context.\n   * This is different from `build` in that it does not serialize to BCS bytes, and instead\n   * uses a separate format that is unique to the transaction builder. This allows\n   * us to serialize partially-complete transactions, that can then be completed and\n   * built in a separate context.\n   *\n   * For example, a dapp can construct a transaction, but not provide gas objects\n   * or a gas budget. The transaction then can be sent to the wallet, where this\n   * information is automatically filled in (e.g. by querying for coin objects\n   * and performing a dry run).\n   */\n  serialize() {\n    return JSON.stringify(__privateGet(this, _blockData).snapshot());\n  }\n  /** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n  async sign(options) {\n    const { signer, ...buildOptions } = options;\n    const bytes = await this.build(buildOptions);\n    return signer.signTransactionBlock(bytes);\n  }\n  /** Build the transaction to BCS bytes. */\n  async build(options = {}) {\n    await __privateMethod(this, _prepare, prepare_fn).call(this, options);\n    return __privateGet(this, _blockData).build({\n      maxSizeBytes: __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxTxSizeBytes\", options),\n      onlyTransactionKind: options.onlyTransactionKind\n    });\n  }\n  /** Derive transaction digest */\n  async getDigest(options = {}) {\n    await __privateMethod(this, _prepare, prepare_fn).call(this, options);\n    return __privateGet(this, _blockData).getDigest();\n  }\n};\nlet TransactionBlock = _TransactionBlock;\n_blockData = new WeakMap();\n_input = new WeakSet();\ninput_fn = function(type, value) {\n  const index = __privateGet(this, _blockData).inputs.length;\n  const input = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.create)(\n    {\n      kind: \"Input\",\n      // bigints can't be serialized to JSON, so just string-convert them here:\n      value: typeof value === \"bigint\" ? String(value) : value,\n      index,\n      type\n    },\n    _Transactions_js__WEBPACK_IMPORTED_MODULE_8__.TransactionBlockInput\n  );\n  __privateGet(this, _blockData).inputs.push(input);\n  return input;\n};\n_normalizeTransactionArgument = new WeakSet();\nnormalizeTransactionArgument_fn = function(arg) {\n  if ((0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.isSerializedBcs)(arg)) {\n    return this.pure(arg);\n  }\n  return arg;\n};\n_getConfig = new WeakSet();\ngetConfig_fn = function(key, { protocolConfig, limits }) {\n  if (limits && typeof limits[key] === \"number\") {\n    return limits[key];\n  }\n  if (!protocolConfig) {\n    return DefaultOfflineLimits[key];\n  }\n  const attribute = protocolConfig?.attributes[LIMITS[key]];\n  if (!attribute) {\n    throw new Error(`Missing expected protocol config: \"${LIMITS[key]}\"`);\n  }\n  const value = \"u64\" in attribute ? attribute.u64 : \"u32\" in attribute ? attribute.u32 : attribute.f64;\n  if (!value) {\n    throw new Error(`Unexpected protocol config value found for: \"${LIMITS[key]}\"`);\n  }\n  return Number(value);\n};\n_validate = new WeakSet();\nvalidate_fn = function(options) {\n  const maxPureArgumentSize = __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxPureArgumentSize\", options);\n  __privateGet(this, _blockData).inputs.forEach((input, index) => {\n    if ((0,superstruct__WEBPACK_IMPORTED_MODULE_3__.is)(input.value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.PureCallArg)) {\n      if (input.value.Pure.length > maxPureArgumentSize) {\n        throw new Error(\n          `Input at index ${index} is too large, max pure input size is ${maxPureArgumentSize} bytes, got ${input.value.Pure.length} bytes`\n        );\n      }\n    }\n  });\n};\n_prepareGasPayment = new WeakSet();\nprepareGasPayment_fn = async function(options) {\n  if (__privateGet(this, _blockData).gasConfig.payment) {\n    const maxGasObjects = __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxGasObjects\", options);\n    if (__privateGet(this, _blockData).gasConfig.payment.length > maxGasObjects) {\n      throw new Error(`Payment objects exceed maximum amount: ${maxGasObjects}`);\n    }\n  }\n  if (options.onlyTransactionKind || __privateGet(this, _blockData).gasConfig.payment) {\n    return;\n  }\n  const gasOwner = __privateGet(this, _blockData).gasConfig.owner ?? __privateGet(this, _blockData).sender;\n  const coins = await expectClient(options).getCoins({\n    owner: gasOwner,\n    coinType: _utils_index_js__WEBPACK_IMPORTED_MODULE_10__.SUI_TYPE_ARG\n  });\n  const paymentCoins = coins.data.filter((coin) => {\n    const matchingInput = __privateGet(this, _blockData).inputs.find((input) => {\n      if ((0,superstruct__WEBPACK_IMPORTED_MODULE_3__.is)(input.value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.BuilderCallArg) && \"Object\" in input.value && \"ImmOrOwned\" in input.value.Object) {\n        return coin.coinObjectId === input.value.Object.ImmOrOwned.objectId;\n      }\n      return false;\n    });\n    return !matchingInput;\n  }).slice(0, __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxGasObjects\", options) - 1).map((coin) => ({\n    objectId: coin.coinObjectId,\n    digest: coin.digest,\n    version: coin.version\n  }));\n  if (!paymentCoins.length) {\n    throw new Error(\"No valid gas coins found for the transaction.\");\n  }\n  this.setGasPayment(paymentCoins);\n};\n_prepareGasPrice = new WeakSet();\nprepareGasPrice_fn = async function(options) {\n  if (options.onlyTransactionKind || __privateGet(this, _blockData).gasConfig.price) {\n    return;\n  }\n  this.setGasPrice(await expectClient(options).getReferenceGasPrice());\n};\n_prepareTransactions = new WeakSet();\nprepareTransactions_fn = async function(options) {\n  const { inputs, transactions } = __privateGet(this, _blockData);\n  const moveModulesToResolve = [];\n  const objectsToResolve = [];\n  inputs.forEach((input) => {\n    if (input.type === \"object\" && typeof input.value === \"string\") {\n      objectsToResolve.push({ id: (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_7__.normalizeSuiAddress)(input.value), input });\n      return;\n    }\n  });\n  transactions.forEach((transaction) => {\n    if (transaction.kind === \"MoveCall\") {\n      const needsResolution = transaction.arguments.some(\n        (arg) => arg.kind === \"Input\" && !(0,superstruct__WEBPACK_IMPORTED_MODULE_3__.is)(inputs[arg.index].value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.BuilderCallArg)\n      );\n      if (needsResolution) {\n        moveModulesToResolve.push(transaction);\n      }\n    }\n    if (transaction.kind === \"SplitCoins\") {\n      transaction.amounts.forEach((amount) => {\n        if (amount.kind === \"Input\") {\n          const input = inputs[amount.index];\n          if (typeof input.value !== \"object\") {\n            input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.Pure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_11__.bcs.U64.serialize(input.value));\n          }\n        }\n      });\n    }\n    if (transaction.kind === \"TransferObjects\") {\n      if (transaction.address.kind === \"Input\") {\n        const input = inputs[transaction.address.index];\n        if (typeof input.value !== \"object\") {\n          input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.Pure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_11__.bcs.Address.serialize(input.value));\n        }\n      }\n    }\n  });\n  if (moveModulesToResolve.length) {\n    await Promise.all(\n      moveModulesToResolve.map(async (moveCall) => {\n        const [packageId, moduleName, functionName] = moveCall.target.split(\"::\");\n        const normalized = await expectClient(options).getNormalizedMoveFunction({\n          package: (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_7__.normalizeSuiObjectId)(packageId),\n          module: moduleName,\n          function: functionName\n        });\n        const hasTxContext = normalized.parameters.length > 0 && (0,_serializer_js__WEBPACK_IMPORTED_MODULE_12__.isTxContext)(normalized.parameters.at(-1));\n        const params = hasTxContext ? normalized.parameters.slice(0, normalized.parameters.length - 1) : normalized.parameters;\n        if (params.length !== moveCall.arguments.length) {\n          throw new Error(\"Incorrect number of arguments.\");\n        }\n        params.forEach((param, i) => {\n          const arg = moveCall.arguments[i];\n          if (arg.kind !== \"Input\")\n            return;\n          const input = inputs[arg.index];\n          if ((0,superstruct__WEBPACK_IMPORTED_MODULE_3__.is)(input.value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.BuilderCallArg))\n            return;\n          const inputValue = input.value;\n          const serType = (0,_serializer_js__WEBPACK_IMPORTED_MODULE_12__.getPureSerializationType)(param, inputValue);\n          if (serType) {\n            input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.Pure(inputValue, serType);\n            return;\n          }\n          const structVal = (0,_types_index_js__WEBPACK_IMPORTED_MODULE_0__.extractStructTag)(param);\n          if (structVal != null || typeof param === \"object\" && \"TypeParameter\" in param) {\n            if (typeof inputValue !== \"string\") {\n              throw new Error(\n                `Expect the argument to be an object id string, got ${JSON.stringify(\n                  inputValue,\n                  null,\n                  2\n                )}`\n              );\n            }\n            objectsToResolve.push({\n              id: inputValue,\n              input,\n              normalizedType: param\n            });\n            return;\n          }\n          throw new Error(\n            `Unknown call arg type ${JSON.stringify(param, null, 2)} for value ${JSON.stringify(\n              inputValue,\n              null,\n              2\n            )}`\n          );\n        });\n      })\n    );\n  }\n  if (objectsToResolve.length) {\n    const dedupedIds = [...new Set(objectsToResolve.map(({ id }) => id))];\n    const objectChunks = chunk(dedupedIds, MAX_OBJECTS_PER_FETCH);\n    const objects = (await Promise.all(\n      objectChunks.map(\n        (chunk2) => expectClient(options).multiGetObjects({\n          ids: chunk2,\n          options: { showOwner: true }\n        })\n      )\n    )).flat();\n    let objectsById = new Map(\n      dedupedIds.map((id, index) => {\n        return [id, objects[index]];\n      })\n    );\n    const invalidObjects = Array.from(objectsById).filter(([_, obj]) => obj.error).map(([id, _]) => id);\n    if (invalidObjects.length) {\n      throw new Error(`The following input objects are invalid: ${invalidObjects.join(\", \")}`);\n    }\n    objectsToResolve.forEach(({ id, input, normalizedType }) => {\n      const object = objectsById.get(id);\n      const owner = object.data?.owner;\n      const initialSharedVersion = owner && typeof owner === \"object\" && \"Shared\" in owner ? owner.Shared.initial_shared_version : void 0;\n      if (initialSharedVersion) {\n        const isByValue = normalizedType != null && (0,_types_index_js__WEBPACK_IMPORTED_MODULE_0__.extractMutableReference)(normalizedType) == null && (0,_types_index_js__WEBPACK_IMPORTED_MODULE_0__.extractReference)(normalizedType) == null;\n        const mutable = (0,_Inputs_js__WEBPACK_IMPORTED_MODULE_6__.isMutableSharedObjectInput)(input.value) || isByValue || normalizedType != null && (0,_types_index_js__WEBPACK_IMPORTED_MODULE_0__.extractMutableReference)(normalizedType) != null;\n        input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.SharedObjectRef({\n          objectId: id,\n          initialSharedVersion,\n          mutable\n        });\n      } else if (normalizedType && isReceivingType(normalizedType)) {\n        input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.ReceivingRef((0,_types_index_js__WEBPACK_IMPORTED_MODULE_4__.getObjectReference)(object));\n      } else {\n        input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.Inputs.ObjectRef((0,_types_index_js__WEBPACK_IMPORTED_MODULE_4__.getObjectReference)(object));\n      }\n    });\n  }\n};\n_prepare = new WeakSet();\nprepare_fn = async function(options) {\n  if (!options.onlyTransactionKind && !__privateGet(this, _blockData).sender) {\n    throw new Error(\"Missing transaction sender\");\n  }\n  if (!options.protocolConfig && !options.limits && options.client) {\n    options.protocolConfig = await options.client.getProtocolConfig();\n  }\n  await Promise.all([__privateMethod(this, _prepareGasPrice, prepareGasPrice_fn).call(this, options), __privateMethod(this, _prepareTransactions, prepareTransactions_fn).call(this, options)]);\n  if (!options.onlyTransactionKind) {\n    await __privateMethod(this, _prepareGasPayment, prepareGasPayment_fn).call(this, options);\n    if (!__privateGet(this, _blockData).gasConfig.budget) {\n      const dryRunResult = await expectClient(options).dryRunTransactionBlock({\n        transactionBlock: __privateGet(this, _blockData).build({\n          maxSizeBytes: __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxTxSizeBytes\", options),\n          overrides: {\n            gasConfig: {\n              budget: String(__privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxTxGas\", options)),\n              payment: []\n            }\n          }\n        })\n      });\n      if (dryRunResult.effects.status.status !== \"success\") {\n        throw new Error(\n          `Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n          { cause: dryRunResult }\n        );\n      }\n      const safeOverhead = GAS_SAFE_OVERHEAD * BigInt(this.blockData.gasConfig.price || 1n);\n      const baseComputationCostWithOverhead = BigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n      const gasBudget = baseComputationCostWithOverhead + BigInt(dryRunResult.effects.gasUsed.storageCost) - BigInt(dryRunResult.effects.gasUsed.storageRebate);\n      this.setGasBudget(\n        gasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead\n      );\n    }\n  }\n  __privateMethod(this, _validate, validate_fn).call(this, options);\n};\n\n//# sourceMappingURL=TransactionBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlock.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlockData.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlockData.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SerializedTransactionDataBuilder: () => (/* binding */ SerializedTransactionDataBuilder),\n/* harmony export */   TransactionBlockDataBuilder: () => (/* binding */ TransactionBlockDataBuilder),\n/* harmony export */   TransactionExpiration: () => (/* binding */ TransactionExpiration)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../bcs/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js\");\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/objects.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/hash.js\");\n/* harmony import */ var _Inputs_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Inputs.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Inputs.js\");\n/* harmony import */ var _Transactions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transactions.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Transactions.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/utils.js\");\n\n\n\n\n\n\n\n\n\nconst TransactionExpiration = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)(\n    (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ Epoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)() }), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ None: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(true), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(null)]) })])\n  )\n);\nconst StringEncodedBigint = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.define)(\"StringEncodedBigint\", (val) => {\n  if (![\"string\", \"number\", \"bigint\"].includes(typeof val))\n    return false;\n  try {\n    BigInt(val);\n    return true;\n  } catch {\n    return false;\n  }\n});\nconst GasConfig = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  budget: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(StringEncodedBigint),\n  price: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(StringEncodedBigint),\n  payment: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(_types_index_js__WEBPACK_IMPORTED_MODULE_1__.SuiObjectRef)),\n  owner: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())\n});\nconst SerializedTransactionDataBuilder = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(1),\n  sender: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  expiration: TransactionExpiration,\n  gasConfig: GasConfig,\n  inputs: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(_Transactions_js__WEBPACK_IMPORTED_MODULE_2__.TransactionBlockInput),\n  transactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(_Transactions_js__WEBPACK_IMPORTED_MODULE_2__.TransactionType)\n});\nfunction prepareSuiAddress(address) {\n  return (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_3__.normalizeSuiAddress)(address).replace(\"0x\", \"\");\n}\nclass TransactionBlockDataBuilder {\n  constructor(clone) {\n    this.version = 1;\n    this.sender = clone?.sender;\n    this.expiration = clone?.expiration;\n    this.gasConfig = clone?.gasConfig ?? {};\n    this.inputs = clone?.inputs ?? [];\n    this.transactions = clone?.transactions ?? [];\n  }\n  static fromKindBytes(bytes) {\n    const kind = _bcs_index_js__WEBPACK_IMPORTED_MODULE_4__.bcs.TransactionKind.parse(bytes);\n    const programmableTx = \"ProgrammableTransaction\" in kind ? kind.ProgrammableTransaction : null;\n    if (!programmableTx) {\n      throw new Error(\"Unable to deserialize from bytes.\");\n    }\n    const serialized = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.create)(\n      {\n        version: 1,\n        gasConfig: {},\n        inputs: programmableTx.inputs.map(\n          (value, index) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.create)(\n            {\n              kind: \"Input\",\n              value,\n              index,\n              type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.PureCallArg) ? \"pure\" : \"object\"\n            },\n            _Transactions_js__WEBPACK_IMPORTED_MODULE_2__.TransactionBlockInput\n          )\n        ),\n        transactions: programmableTx.transactions\n      },\n      SerializedTransactionDataBuilder\n    );\n    return TransactionBlockDataBuilder.restore(serialized);\n  }\n  static fromBytes(bytes) {\n    const rawData = _bcs_index_js__WEBPACK_IMPORTED_MODULE_4__.bcs.TransactionData.parse(bytes);\n    const data = rawData?.V1;\n    const programmableTx = \"ProgrammableTransaction\" in data.kind ? data?.kind?.ProgrammableTransaction : null;\n    if (!data || !programmableTx) {\n      throw new Error(\"Unable to deserialize from bytes.\");\n    }\n    const serialized = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.create)(\n      {\n        version: 1,\n        sender: data.sender,\n        expiration: data.expiration,\n        gasConfig: data.gasData,\n        inputs: programmableTx.inputs.map(\n          (value, index) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.create)(\n            {\n              kind: \"Input\",\n              value,\n              index,\n              type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.PureCallArg) ? \"pure\" : \"object\"\n            },\n            _Transactions_js__WEBPACK_IMPORTED_MODULE_2__.TransactionBlockInput\n          )\n        ),\n        transactions: programmableTx.transactions\n      },\n      SerializedTransactionDataBuilder\n    );\n    return TransactionBlockDataBuilder.restore(serialized);\n  }\n  static restore(data) {\n    (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assert)(data, SerializedTransactionDataBuilder);\n    const transactionData = new TransactionBlockDataBuilder();\n    Object.assign(transactionData, data);\n    return transactionData;\n  }\n  /**\n   * Generate transaction digest.\n   *\n   * @param bytes BCS serialized transaction data\n   * @returns transaction digest.\n   */\n  static getDigestFromBytes(bytes) {\n    const hash = (0,_hash_js__WEBPACK_IMPORTED_MODULE_7__.hashTypedData)(\"TransactionData\", bytes);\n    return (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_8__.toB58)(hash);\n  }\n  build({\n    maxSizeBytes = Infinity,\n    overrides,\n    onlyTransactionKind\n  } = {}) {\n    const inputs = this.inputs.map((input) => {\n      (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assert)(input.value, _Inputs_js__WEBPACK_IMPORTED_MODULE_6__.BuilderCallArg);\n      return input.value;\n    });\n    const kind = {\n      ProgrammableTransaction: {\n        inputs,\n        transactions: this.transactions\n      }\n    };\n    if (onlyTransactionKind) {\n      return _bcs_index_js__WEBPACK_IMPORTED_MODULE_4__.bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();\n    }\n    const expiration = overrides?.expiration ?? this.expiration;\n    const sender = overrides?.sender ?? this.sender;\n    const gasConfig = { ...this.gasConfig, ...overrides?.gasConfig };\n    if (!sender) {\n      throw new Error(\"Missing transaction sender\");\n    }\n    if (!gasConfig.budget) {\n      throw new Error(\"Missing gas budget\");\n    }\n    if (!gasConfig.payment) {\n      throw new Error(\"Missing gas payment\");\n    }\n    if (!gasConfig.price) {\n      throw new Error(\"Missing gas price\");\n    }\n    const transactionData = {\n      sender: prepareSuiAddress(sender),\n      expiration: expiration ? expiration : { None: true },\n      gasData: {\n        payment: gasConfig.payment,\n        owner: prepareSuiAddress(this.gasConfig.owner ?? sender),\n        price: BigInt(gasConfig.price),\n        budget: BigInt(gasConfig.budget)\n      },\n      kind: {\n        ProgrammableTransaction: {\n          inputs,\n          transactions: this.transactions\n        }\n      }\n    };\n    return _bcs_index_js__WEBPACK_IMPORTED_MODULE_4__.bcs.TransactionData.serialize(\n      { V1: transactionData },\n      { maxSize: maxSizeBytes }\n    ).toBytes();\n  }\n  getDigest() {\n    const bytes = this.build({ onlyTransactionKind: false });\n    return TransactionBlockDataBuilder.getDigestFromBytes(bytes);\n  }\n  snapshot() {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.create)(this, SerializedTransactionDataBuilder);\n  }\n}\n\n//# sourceMappingURL=TransactionBlockData.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlockData.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Transactions.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/Transactions.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MakeMoveVecTransaction: () => (/* binding */ MakeMoveVecTransaction),\n/* harmony export */   MergeCoinsTransaction: () => (/* binding */ MergeCoinsTransaction),\n/* harmony export */   MoveCallTransaction: () => (/* binding */ MoveCallTransaction),\n/* harmony export */   PublishTransaction: () => (/* binding */ PublishTransaction),\n/* harmony export */   SplitCoinsTransaction: () => (/* binding */ SplitCoinsTransaction),\n/* harmony export */   TransactionArgument: () => (/* binding */ TransactionArgument),\n/* harmony export */   TransactionBlockInput: () => (/* binding */ TransactionBlockInput),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   Transactions: () => (/* binding */ Transactions),\n/* harmony export */   TransferObjectsTransaction: () => (/* binding */ TransferObjectsTransaction),\n/* harmony export */   UpgradePolicy: () => (/* binding */ UpgradePolicy),\n/* harmony export */   UpgradeTransaction: () => (/* binding */ UpgradeTransaction),\n/* harmony export */   getTransactionType: () => (/* binding */ getTransactionType)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bcs/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js\");\n/* harmony import */ var _bcs_type_tag_serializer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../bcs/type-tag-serializer.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/type-tag-serializer.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _Inputs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Inputs.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Inputs.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/utils.js\");\n\n\n\n\n\n\n\nconst option = (some) => (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ None: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(true), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(null)]) }), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ Some: some })]);\nconst TransactionBlockInput = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Input\"),\n    index: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)(),\n    value: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.any)()),\n    type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"object\"))\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Input\"),\n    index: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)(),\n    value: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.any)()),\n    type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"pure\")\n  })\n]);\nconst TransactionArgumentTypes = [\n  TransactionBlockInput,\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"GasCoin\") }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Result\"), index: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)() }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"NestedResult\"),\n    index: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)(),\n    resultIndex: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)()\n  })\n];\nconst TransactionArgument = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([...TransactionArgumentTypes]);\nconst MoveCallTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"MoveCall\"),\n  target: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.define)(\"target\", (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)().validator),\n  typeArguments: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  arguments: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(TransactionArgument)\n});\nconst TransferObjectsTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"TransferObjects\"),\n  objects: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(TransactionArgument),\n  address: TransactionArgument\n});\nconst SplitCoinsTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"SplitCoins\"),\n  coin: TransactionArgument,\n  amounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(TransactionArgument)\n});\nconst MergeCoinsTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"MergeCoins\"),\n  destination: TransactionArgument,\n  sources: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(TransactionArgument)\n});\nconst MakeMoveVecTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"MakeMoveVec\"),\n  // TODO: ideally we should use `TypeTag` instead of `record()` here,\n  // but TypeTag is recursively defined and it's tricky to define a\n  // recursive struct in superstruct\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(option((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.unknown)()))),\n  objects: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(TransactionArgument)\n});\nconst PublishTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Publish\"),\n  modules: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)())),\n  dependencies: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())\n});\nvar UpgradePolicy = /* @__PURE__ */ ((UpgradePolicy2) => {\n  UpgradePolicy2[UpgradePolicy2[\"COMPATIBLE\"] = 0] = \"COMPATIBLE\";\n  UpgradePolicy2[UpgradePolicy2[\"ADDITIVE\"] = 128] = \"ADDITIVE\";\n  UpgradePolicy2[UpgradePolicy2[\"DEP_ONLY\"] = 192] = \"DEP_ONLY\";\n  return UpgradePolicy2;\n})(UpgradePolicy || {});\nconst UpgradeTransaction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  kind: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Upgrade\"),\n  modules: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.integer)())),\n  dependencies: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  packageId: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  ticket: TransactionArgument\n});\nconst TransactionTypes = [\n  MoveCallTransaction,\n  TransferObjectsTransaction,\n  SplitCoinsTransaction,\n  MergeCoinsTransaction,\n  PublishTransaction,\n  UpgradeTransaction,\n  MakeMoveVecTransaction\n];\nconst TransactionType = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([...TransactionTypes]);\nfunction getTransactionType(data) {\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assert)(data, TransactionType);\n  return TransactionTypes.find((schema) => (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(data, schema));\n}\nconst Transactions = {\n  MoveCall(input) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)(\n      {\n        kind: \"MoveCall\",\n        target: input.target,\n        arguments: input.arguments ?? [],\n        typeArguments: input.typeArguments ?? []\n      },\n      MoveCallTransaction\n    );\n  },\n  TransferObjects(objects, address) {\n    if (address.kind === \"Input\" && address.type === \"pure\" && typeof address.value !== \"object\") {\n      address.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_2__.Inputs.Pure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_3__.bcs.Address.serialize(address.value));\n    }\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)({ kind: \"TransferObjects\", objects, address }, TransferObjectsTransaction);\n  },\n  SplitCoins(coin, amounts) {\n    amounts.forEach((input) => {\n      if (input.kind === \"Input\" && input.type === \"pure\" && typeof input.value !== \"object\") {\n        input.value = _Inputs_js__WEBPACK_IMPORTED_MODULE_2__.Inputs.Pure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_3__.bcs.U64.serialize(input.value));\n      }\n    });\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)(\n      {\n        kind: \"SplitCoins\",\n        coin,\n        amounts\n      },\n      SplitCoinsTransaction\n    );\n  },\n  MergeCoins(destination, sources) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)({ kind: \"MergeCoins\", destination, sources }, MergeCoinsTransaction);\n  },\n  Publish({\n    modules,\n    dependencies\n  }) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)(\n      {\n        kind: \"Publish\",\n        modules: modules.map(\n          (module) => typeof module === \"string\" ? Array.from((0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_4__.fromB64)(module)) : module\n        ),\n        dependencies: dependencies.map((dep) => (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_5__.normalizeSuiObjectId)(dep))\n      },\n      PublishTransaction\n    );\n  },\n  Upgrade({\n    modules,\n    dependencies,\n    packageId,\n    ticket\n  }) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)(\n      {\n        kind: \"Upgrade\",\n        modules: modules.map(\n          (module) => typeof module === \"string\" ? Array.from((0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_4__.fromB64)(module)) : module\n        ),\n        dependencies: dependencies.map((dep) => (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_5__.normalizeSuiObjectId)(dep)),\n        packageId,\n        ticket\n      },\n      UpgradeTransaction\n    );\n  },\n  MakeMoveVec({\n    type,\n    objects\n  }) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.create)(\n      {\n        kind: \"MakeMoveVec\",\n        type: type ? { Some: _bcs_type_tag_serializer_js__WEBPACK_IMPORTED_MODULE_6__.TypeTagSerializer.parseFromStr(type) } : { None: null },\n        objects\n      },\n      MakeMoveVecTransaction\n    );\n  }\n};\n\n//# sourceMappingURL=Transactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/Transactions.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/hash.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/hash.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashTypedData: () => (/* binding */ hashTypedData)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_blake2b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/blake2b */ \"(ssr)/../../node_modules/@noble/hashes/esm/blake2b.js\");\n\nfunction hashTypedData(typeTag, data) {\n  const typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n  const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n  dataWithTag.set(typeTagBytes);\n  dataWithTag.set(data, typeTagBytes.length);\n  return (0,_noble_hashes_blake2b__WEBPACK_IMPORTED_MODULE_0__.blake2b)(dataWithTag, { dkLen: 32 });\n}\n\n//# sourceMappingURL=hash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUNoRDtBQUNBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLFNBQVMsOERBQU8sZ0JBQWdCLFdBQVc7QUFDM0M7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb3dubG9hZHMvbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvaGFzaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibGFrZTJiIH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvYmxha2UyYlwiO1xuZnVuY3Rpb24gaGFzaFR5cGVkRGF0YSh0eXBlVGFnLCBkYXRhKSB7XG4gIGNvbnN0IHR5cGVUYWdCeXRlcyA9IEFycmF5LmZyb20oYCR7dHlwZVRhZ306OmApLm1hcCgoZSkgPT4gZS5jaGFyQ29kZUF0KDApKTtcbiAgY29uc3QgZGF0YVdpdGhUYWcgPSBuZXcgVWludDhBcnJheSh0eXBlVGFnQnl0ZXMubGVuZ3RoICsgZGF0YS5sZW5ndGgpO1xuICBkYXRhV2l0aFRhZy5zZXQodHlwZVRhZ0J5dGVzKTtcbiAgZGF0YVdpdGhUYWcuc2V0KGRhdGEsIHR5cGVUYWdCeXRlcy5sZW5ndGgpO1xuICByZXR1cm4gYmxha2UyYihkYXRhV2l0aFRhZywgeyBka0xlbjogMzIgfSk7XG59XG5leHBvcnQge1xuICBoYXNoVHlwZWREYXRhXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/hash.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/pure.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/pure.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPure: () => (/* binding */ createPure)\n/* harmony export */ });\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bcs/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/bcs/index.js\");\n\nfunction createPure(makePure) {\n  function pure(value, type) {\n    return makePure(value, type);\n  }\n  pure.u8 = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.U8.serialize(value));\n  pure.u16 = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.U16.serialize(value));\n  pure.u32 = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.U32.serialize(value));\n  pure.u64 = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.U64.serialize(value));\n  pure.u128 = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.U128.serialize(value));\n  pure.u256 = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.U256.serialize(value));\n  pure.bool = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.Bool.serialize(value));\n  pure.string = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.String.serialize(value));\n  pure.address = (value) => makePure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_0__.bcs.Address.serialize(value));\n  pure.id = pure.address;\n  return pure;\n}\n\n//# sourceMappingURL=pure.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvcHVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBRztBQUNuQyxpQ0FBaUMsOENBQUc7QUFDcEMsaUNBQWlDLDhDQUFHO0FBQ3BDLGlDQUFpQyw4Q0FBRztBQUNwQyxrQ0FBa0MsOENBQUc7QUFDckMsa0NBQWtDLDhDQUFHO0FBQ3JDLGtDQUFrQyw4Q0FBRztBQUNyQyxvQ0FBb0MsOENBQUc7QUFDdkMscUNBQXFDLDhDQUFHO0FBQ3hDO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0Rvd25sb2Fkcy9ub2RlX21vZHVsZXMvQG15c3Rlbi9zdWkuanMvZGlzdC9lc20vYnVpbGRlci9wdXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJjcyB9IGZyb20gXCIuLi9iY3MvaW5kZXguanNcIjtcbmZ1bmN0aW9uIGNyZWF0ZVB1cmUobWFrZVB1cmUpIHtcbiAgZnVuY3Rpb24gcHVyZSh2YWx1ZSwgdHlwZSkge1xuICAgIHJldHVybiBtYWtlUHVyZSh2YWx1ZSwgdHlwZSk7XG4gIH1cbiAgcHVyZS51OCA9ICh2YWx1ZSkgPT4gbWFrZVB1cmUoYmNzLlU4LnNlcmlhbGl6ZSh2YWx1ZSkpO1xuICBwdXJlLnUxNiA9ICh2YWx1ZSkgPT4gbWFrZVB1cmUoYmNzLlUxNi5zZXJpYWxpemUodmFsdWUpKTtcbiAgcHVyZS51MzIgPSAodmFsdWUpID0+IG1ha2VQdXJlKGJjcy5VMzIuc2VyaWFsaXplKHZhbHVlKSk7XG4gIHB1cmUudTY0ID0gKHZhbHVlKSA9PiBtYWtlUHVyZShiY3MuVTY0LnNlcmlhbGl6ZSh2YWx1ZSkpO1xuICBwdXJlLnUxMjggPSAodmFsdWUpID0+IG1ha2VQdXJlKGJjcy5VMTI4LnNlcmlhbGl6ZSh2YWx1ZSkpO1xuICBwdXJlLnUyNTYgPSAodmFsdWUpID0+IG1ha2VQdXJlKGJjcy5VMjU2LnNlcmlhbGl6ZSh2YWx1ZSkpO1xuICBwdXJlLmJvb2wgPSAodmFsdWUpID0+IG1ha2VQdXJlKGJjcy5Cb29sLnNlcmlhbGl6ZSh2YWx1ZSkpO1xuICBwdXJlLnN0cmluZyA9ICh2YWx1ZSkgPT4gbWFrZVB1cmUoYmNzLlN0cmluZy5zZXJpYWxpemUodmFsdWUpKTtcbiAgcHVyZS5hZGRyZXNzID0gKHZhbHVlKSA9PiBtYWtlUHVyZShiY3MuQWRkcmVzcy5zZXJpYWxpemUodmFsdWUpKTtcbiAgcHVyZS5pZCA9IHB1cmUuYWRkcmVzcztcbiAgcmV0dXJuIHB1cmU7XG59XG5leHBvcnQge1xuICBjcmVhdGVQdXJlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVyZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/pure.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/serializer.js":
/*!************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/serializer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPureSerializationType: () => (/* binding */ getPureSerializationType),\n/* harmony export */   isTxContext: () => (/* binding */ isTxContext)\n/* harmony export */ });\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/normalized.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/index.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n\n\n\nconst OBJECT_MODULE_NAME = \"object\";\nconst ID_STRUCT_NAME = \"ID\";\nconst STD_ASCII_MODULE_NAME = \"ascii\";\nconst STD_ASCII_STRUCT_NAME = \"String\";\nconst STD_UTF8_MODULE_NAME = \"string\";\nconst STD_UTF8_STRUCT_NAME = \"String\";\nconst STD_OPTION_MODULE_NAME = \"option\";\nconst STD_OPTION_STRUCT_NAME = \"Option\";\nconst RESOLVED_SUI_ID = {\n  address: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.SUI_FRAMEWORK_ADDRESS,\n  module: OBJECT_MODULE_NAME,\n  name: ID_STRUCT_NAME\n};\nconst RESOLVED_ASCII_STR = {\n  address: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.MOVE_STDLIB_ADDRESS,\n  module: STD_ASCII_MODULE_NAME,\n  name: STD_ASCII_STRUCT_NAME\n};\nconst RESOLVED_UTF8_STR = {\n  address: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.MOVE_STDLIB_ADDRESS,\n  module: STD_UTF8_MODULE_NAME,\n  name: STD_UTF8_STRUCT_NAME\n};\nconst RESOLVED_STD_OPTION = {\n  address: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.MOVE_STDLIB_ADDRESS,\n  module: STD_OPTION_MODULE_NAME,\n  name: STD_OPTION_STRUCT_NAME\n};\nconst isSameStruct = (a, b) => a.address === b.address && a.module === b.module && a.name === b.name;\nfunction isTxContext(param) {\n  const struct = (0,_types_index_js__WEBPACK_IMPORTED_MODULE_1__.extractStructTag)(param)?.Struct;\n  return struct?.address === \"0x2\" && struct?.module === \"tx_context\" && struct?.name === \"TxContext\";\n}\nfunction expectType(typeName, argVal) {\n  if (typeof argVal === \"undefined\") {\n    return;\n  }\n  if (typeof argVal !== typeName) {\n    throw new Error(`Expect ${argVal} to be ${typeName}, received ${typeof argVal}`);\n  }\n}\nconst allowedTypes = [\"Address\", \"Bool\", \"U8\", \"U16\", \"U32\", \"U64\", \"U128\", \"U256\"];\nfunction getPureSerializationType(normalizedType, argVal) {\n  if (typeof normalizedType === \"string\" && allowedTypes.includes(normalizedType)) {\n    if (normalizedType in [\"U8\", \"U16\", \"U32\", \"U64\", \"U128\", \"U256\"]) {\n      expectType(\"number\", argVal);\n    } else if (normalizedType === \"Bool\") {\n      expectType(\"boolean\", argVal);\n    } else if (normalizedType === \"Address\") {\n      expectType(\"string\", argVal);\n      if (argVal && !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_2__.isValidSuiAddress)(argVal)) {\n        throw new Error(\"Invalid Sui Address\");\n      }\n    }\n    return normalizedType.toLowerCase();\n  } else if (typeof normalizedType === \"string\") {\n    throw new Error(`Unknown pure normalized type ${JSON.stringify(normalizedType, null, 2)}`);\n  }\n  if (\"Vector\" in normalizedType) {\n    if ((argVal === void 0 || typeof argVal === \"string\") && normalizedType.Vector === \"U8\") {\n      return \"string\";\n    }\n    if (argVal !== void 0 && !Array.isArray(argVal)) {\n      throw new Error(`Expect ${argVal} to be a array, received ${typeof argVal}`);\n    }\n    const innerType = getPureSerializationType(\n      normalizedType.Vector,\n      // undefined when argVal is empty\n      argVal ? argVal[0] : void 0\n    );\n    if (innerType === void 0) {\n      return;\n    }\n    return `vector<${innerType}>`;\n  }\n  if (\"Struct\" in normalizedType) {\n    if (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\n      return \"string\";\n    } else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\n      return \"utf8string\";\n    } else if (isSameStruct(normalizedType.Struct, RESOLVED_SUI_ID)) {\n      return \"address\";\n    } else if (isSameStruct(normalizedType.Struct, RESOLVED_STD_OPTION)) {\n      const optionToVec = {\n        Vector: normalizedType.Struct.typeArguments[0]\n      };\n      return getPureSerializationType(optionToVec, argVal);\n    }\n  }\n  return void 0;\n}\n\n//# sourceMappingURL=serializer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvc2VyaWFsaXplci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxRDtBQUMwQjtBQUNyQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0VBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnRUFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdFQUFtQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlFQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRLFFBQVEsU0FBUyxhQUFhLGNBQWM7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxxQkFBcUIsc0VBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLG9EQUFvRCx3Q0FBd0M7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsMEJBQTBCLGNBQWM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFVBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0Rvd25sb2Fkcy9ub2RlX21vZHVsZXMvQG15c3Rlbi9zdWkuanMvZGlzdC9lc20vYnVpbGRlci9zZXJpYWxpemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RTdHJ1Y3RUYWcgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IE1PVkVfU1RETElCX0FERFJFU1MsIFNVSV9GUkFNRVdPUktfQUREUkVTUyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNWYWxpZFN1aUFkZHJlc3MgfSBmcm9tIFwiLi4vdXRpbHMvc3VpLXR5cGVzLmpzXCI7XG5jb25zdCBPQkpFQ1RfTU9EVUxFX05BTUUgPSBcIm9iamVjdFwiO1xuY29uc3QgSURfU1RSVUNUX05BTUUgPSBcIklEXCI7XG5jb25zdCBTVERfQVNDSUlfTU9EVUxFX05BTUUgPSBcImFzY2lpXCI7XG5jb25zdCBTVERfQVNDSUlfU1RSVUNUX05BTUUgPSBcIlN0cmluZ1wiO1xuY29uc3QgU1REX1VURjhfTU9EVUxFX05BTUUgPSBcInN0cmluZ1wiO1xuY29uc3QgU1REX1VURjhfU1RSVUNUX05BTUUgPSBcIlN0cmluZ1wiO1xuY29uc3QgU1REX09QVElPTl9NT0RVTEVfTkFNRSA9IFwib3B0aW9uXCI7XG5jb25zdCBTVERfT1BUSU9OX1NUUlVDVF9OQU1FID0gXCJPcHRpb25cIjtcbmNvbnN0IFJFU09MVkVEX1NVSV9JRCA9IHtcbiAgYWRkcmVzczogU1VJX0ZSQU1FV09SS19BRERSRVNTLFxuICBtb2R1bGU6IE9CSkVDVF9NT0RVTEVfTkFNRSxcbiAgbmFtZTogSURfU1RSVUNUX05BTUVcbn07XG5jb25zdCBSRVNPTFZFRF9BU0NJSV9TVFIgPSB7XG4gIGFkZHJlc3M6IE1PVkVfU1RETElCX0FERFJFU1MsXG4gIG1vZHVsZTogU1REX0FTQ0lJX01PRFVMRV9OQU1FLFxuICBuYW1lOiBTVERfQVNDSUlfU1RSVUNUX05BTUVcbn07XG5jb25zdCBSRVNPTFZFRF9VVEY4X1NUUiA9IHtcbiAgYWRkcmVzczogTU9WRV9TVERMSUJfQUREUkVTUyxcbiAgbW9kdWxlOiBTVERfVVRGOF9NT0RVTEVfTkFNRSxcbiAgbmFtZTogU1REX1VURjhfU1RSVUNUX05BTUVcbn07XG5jb25zdCBSRVNPTFZFRF9TVERfT1BUSU9OID0ge1xuICBhZGRyZXNzOiBNT1ZFX1NURExJQl9BRERSRVNTLFxuICBtb2R1bGU6IFNURF9PUFRJT05fTU9EVUxFX05BTUUsXG4gIG5hbWU6IFNURF9PUFRJT05fU1RSVUNUX05BTUVcbn07XG5jb25zdCBpc1NhbWVTdHJ1Y3QgPSAoYSwgYikgPT4gYS5hZGRyZXNzID09PSBiLmFkZHJlc3MgJiYgYS5tb2R1bGUgPT09IGIubW9kdWxlICYmIGEubmFtZSA9PT0gYi5uYW1lO1xuZnVuY3Rpb24gaXNUeENvbnRleHQocGFyYW0pIHtcbiAgY29uc3Qgc3RydWN0ID0gZXh0cmFjdFN0cnVjdFRhZyhwYXJhbSk/LlN0cnVjdDtcbiAgcmV0dXJuIHN0cnVjdD8uYWRkcmVzcyA9PT0gXCIweDJcIiAmJiBzdHJ1Y3Q/Lm1vZHVsZSA9PT0gXCJ0eF9jb250ZXh0XCIgJiYgc3RydWN0Py5uYW1lID09PSBcIlR4Q29udGV4dFwiO1xufVxuZnVuY3Rpb24gZXhwZWN0VHlwZSh0eXBlTmFtZSwgYXJnVmFsKSB7XG4gIGlmICh0eXBlb2YgYXJnVmFsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2YgYXJnVmFsICE9PSB0eXBlTmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ICR7YXJnVmFsfSB0byBiZSAke3R5cGVOYW1lfSwgcmVjZWl2ZWQgJHt0eXBlb2YgYXJnVmFsfWApO1xuICB9XG59XG5jb25zdCBhbGxvd2VkVHlwZXMgPSBbXCJBZGRyZXNzXCIsIFwiQm9vbFwiLCBcIlU4XCIsIFwiVTE2XCIsIFwiVTMyXCIsIFwiVTY0XCIsIFwiVTEyOFwiLCBcIlUyNTZcIl07XG5mdW5jdGlvbiBnZXRQdXJlU2VyaWFsaXphdGlvblR5cGUobm9ybWFsaXplZFR5cGUsIGFyZ1ZhbCkge1xuICBpZiAodHlwZW9mIG5vcm1hbGl6ZWRUeXBlID09PSBcInN0cmluZ1wiICYmIGFsbG93ZWRUeXBlcy5pbmNsdWRlcyhub3JtYWxpemVkVHlwZSkpIHtcbiAgICBpZiAobm9ybWFsaXplZFR5cGUgaW4gW1wiVThcIiwgXCJVMTZcIiwgXCJVMzJcIiwgXCJVNjRcIiwgXCJVMTI4XCIsIFwiVTI1NlwiXSkge1xuICAgICAgZXhwZWN0VHlwZShcIm51bWJlclwiLCBhcmdWYWwpO1xuICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFR5cGUgPT09IFwiQm9vbFwiKSB7XG4gICAgICBleHBlY3RUeXBlKFwiYm9vbGVhblwiLCBhcmdWYWwpO1xuICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFR5cGUgPT09IFwiQWRkcmVzc1wiKSB7XG4gICAgICBleHBlY3RUeXBlKFwic3RyaW5nXCIsIGFyZ1ZhbCk7XG4gICAgICBpZiAoYXJnVmFsICYmICFpc1ZhbGlkU3VpQWRkcmVzcyhhcmdWYWwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgU3VpIEFkZHJlc3NcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBub3JtYWxpemVkVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwdXJlIG5vcm1hbGl6ZWQgdHlwZSAke0pTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZWRUeXBlLCBudWxsLCAyKX1gKTtcbiAgfVxuICBpZiAoXCJWZWN0b3JcIiBpbiBub3JtYWxpemVkVHlwZSkge1xuICAgIGlmICgoYXJnVmFsID09PSB2b2lkIDAgfHwgdHlwZW9mIGFyZ1ZhbCA9PT0gXCJzdHJpbmdcIikgJiYgbm9ybWFsaXplZFR5cGUuVmVjdG9yID09PSBcIlU4XCIpIHtcbiAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgIH1cbiAgICBpZiAoYXJnVmFsICE9PSB2b2lkIDAgJiYgIUFycmF5LmlzQXJyYXkoYXJnVmFsKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgJHthcmdWYWx9IHRvIGJlIGEgYXJyYXksIHJlY2VpdmVkICR7dHlwZW9mIGFyZ1ZhbH1gKTtcbiAgICB9XG4gICAgY29uc3QgaW5uZXJUeXBlID0gZ2V0UHVyZVNlcmlhbGl6YXRpb25UeXBlKFxuICAgICAgbm9ybWFsaXplZFR5cGUuVmVjdG9yLFxuICAgICAgLy8gdW5kZWZpbmVkIHdoZW4gYXJnVmFsIGlzIGVtcHR5XG4gICAgICBhcmdWYWwgPyBhcmdWYWxbMF0gOiB2b2lkIDBcbiAgICApO1xuICAgIGlmIChpbm5lclR5cGUgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYHZlY3Rvcjwke2lubmVyVHlwZX0+YDtcbiAgfVxuICBpZiAoXCJTdHJ1Y3RcIiBpbiBub3JtYWxpemVkVHlwZSkge1xuICAgIGlmIChpc1NhbWVTdHJ1Y3Qobm9ybWFsaXplZFR5cGUuU3RydWN0LCBSRVNPTFZFRF9BU0NJSV9TVFIpKSB7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9IGVsc2UgaWYgKGlzU2FtZVN0cnVjdChub3JtYWxpemVkVHlwZS5TdHJ1Y3QsIFJFU09MVkVEX1VURjhfU1RSKSkge1xuICAgICAgcmV0dXJuIFwidXRmOHN0cmluZ1wiO1xuICAgIH0gZWxzZSBpZiAoaXNTYW1lU3RydWN0KG5vcm1hbGl6ZWRUeXBlLlN0cnVjdCwgUkVTT0xWRURfU1VJX0lEKSkge1xuICAgICAgcmV0dXJuIFwiYWRkcmVzc1wiO1xuICAgIH0gZWxzZSBpZiAoaXNTYW1lU3RydWN0KG5vcm1hbGl6ZWRUeXBlLlN0cnVjdCwgUkVTT0xWRURfU1REX09QVElPTikpIHtcbiAgICAgIGNvbnN0IG9wdGlvblRvVmVjID0ge1xuICAgICAgICBWZWN0b3I6IG5vcm1hbGl6ZWRUeXBlLlN0cnVjdC50eXBlQXJndW1lbnRzWzBdXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGdldFB1cmVTZXJpYWxpemF0aW9uVHlwZShvcHRpb25Ub1ZlYywgYXJnVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmV4cG9ydCB7XG4gIGdldFB1cmVTZXJpYWxpemF0aW9uVHlwZSxcbiAgaXNUeENvbnRleHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJpYWxpemVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/serializer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/utils.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/builder/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n\nfunction create(value, struct) {\n  return (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.create)(value, struct);\n}\n\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2J1aWxkZXIvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEQ7QUFDMUQ7QUFDQSxTQUFTLG1EQUFpQjtBQUMxQjtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0Rvd25sb2Fkcy9ub2RlX21vZHVsZXMvQG15c3Rlbi9zdWkuanMvZGlzdC9lc20vYnVpbGRlci91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUgYXMgc3VwZXJzdHJ1Y3RDcmVhdGUgfSBmcm9tIFwic3VwZXJzdHJ1Y3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSwgc3RydWN0KSB7XG4gIHJldHVybiBzdXBlcnN0cnVjdENyZWF0ZSh2YWx1ZSwgc3RydWN0KTtcbn1cbmV4cG9ydCB7XG4gIGNyZWF0ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/client.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/client/client.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SUI_CLIENT_BRAND: () => (/* binding */ SUI_CLIENT_BRAND),\n/* harmony export */   SuiClient: () => (/* binding */ SuiClient),\n/* harmony export */   isSuiClient: () => (/* binding */ isSuiClient)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var _builder_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../builder/index.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/builder/TransactionBlock.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _http_transport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http-transport.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/http-transport.js\");\n\n\n\n\nconst SUI_CLIENT_BRAND = Symbol.for(\"@mysten/SuiClient\");\nfunction isSuiClient(client) {\n  return typeof client === \"object\" && client !== null && client[SUI_CLIENT_BRAND] === true;\n}\nclass SuiClient {\n  get [SUI_CLIENT_BRAND]() {\n    return true;\n  }\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options) {\n    this.transport = options.transport ?? new _http_transport_js__WEBPACK_IMPORTED_MODULE_0__.SuiHTTPTransport({ url: options.url });\n  }\n  async getRpcApiVersion() {\n    const resp = await this.transport.request({\n      method: \"rpc.discover\",\n      params: []\n    });\n    return resp.info.version;\n  }\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   */\n  async getCoins(input) {\n    if (!input.owner || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getCoins\",\n      params: [input.owner, input.coinType, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get all Coin objects owned by an address.\n   */\n  async getAllCoins(input) {\n    if (!input.owner || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllCoins\",\n      params: [input.owner, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance(input) {\n    if (!input.owner || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getBalance\",\n      params: [input.owner, input.coinType]\n    });\n  }\n  /**\n   * Get the total coin balance for all coin types, owned by the address owner.\n   */\n  async getAllBalances(input) {\n    if (!input.owner || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({ method: \"suix_getAllBalances\", params: [input.owner] });\n  }\n  /**\n   * Fetch CoinMetadata for a given coin type\n   */\n  async getCoinMetadata(input) {\n    return await this.transport.request({\n      method: \"suix_getCoinMetadata\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   *  Fetch total supply for a coin\n   */\n  async getTotalSupply(input) {\n    return await this.transport.request({\n      method: \"suix_getTotalSupply\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   * Invoke any RPC method\n   * @param method the method to be invoked\n   * @param args the arguments to be passed to the RPC request\n   */\n  async call(method, params) {\n    return await this.transport.request({ method, params });\n  }\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  async getMoveFunctionArgTypes(input) {\n    return await this.transport.request({\n      method: \"sui_getMoveFunctionArgTypes\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  async getNormalizedMoveModulesByPackage(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModulesByPackage\",\n      params: [input.package]\n    });\n  }\n  /**\n   * Get a structured representation of Move module\n   */\n  async getNormalizedMoveModule(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModule\",\n      params: [input.package, input.module]\n    });\n  }\n  /**\n   * Get a structured representation of Move function\n   */\n  async getNormalizedMoveFunction(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveFunction\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a structured representation of Move struct\n   */\n  async getNormalizedMoveStruct(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveStruct\",\n      params: [input.package, input.module, input.struct]\n    });\n  }\n  /**\n   * Get all objects owned by an address\n   */\n  async getOwnedObjects(input) {\n    if (!input.owner || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getOwnedObjects\",\n      params: [\n        input.owner,\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit\n      ]\n    });\n  }\n  /**\n   * Get details about an object\n   */\n  async getObject(input) {\n    if (!input.id || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiObjectId)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiObjectId)(input.id))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"sui_getObject\",\n      params: [input.id, input.options]\n    });\n  }\n  async tryGetPastObject(input) {\n    return await this.transport.request({\n      method: \"sui_tryGetPastObject\",\n      params: [input.id, input.version, input.options]\n    });\n  }\n  /**\n   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n   */\n  async multiGetObjects(input) {\n    input.ids.forEach((id) => {\n      if (!id || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiObjectId)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiObjectId)(id))) {\n        throw new Error(`Invalid Sui Object id ${id}`);\n      }\n    });\n    const hasDuplicates = input.ids.length !== new Set(input.ids).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate object ids in batch call ${input.ids}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetObjects\",\n      params: [input.ids, input.options]\n    });\n  }\n  /**\n   * Get transaction blocks for a given query criteria\n   */\n  async queryTransactionBlocks(input) {\n    return await this.transport.request({\n      method: \"suix_queryTransactionBlocks\",\n      params: [\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  async getTransactionBlock(input) {\n    if (!(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidTransactionDigest)(input.digest)) {\n      throw new Error(\"Invalid Transaction digest\");\n    }\n    return await this.transport.request({\n      method: \"sui_getTransactionBlock\",\n      params: [input.digest, input.options]\n    });\n  }\n  async multiGetTransactionBlocks(input) {\n    input.digests.forEach((d) => {\n      if (!(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidTransactionDigest)(d)) {\n        throw new Error(`Invalid Transaction digest ${d}`);\n      }\n    });\n    const hasDuplicates = input.digests.length !== new Set(input.digests).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate digests in batch call ${input.digests}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetTransactionBlocks\",\n      params: [input.digests, input.options]\n    });\n  }\n  async executeTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"sui_executeTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.toB64)(input.transactionBlock),\n        Array.isArray(input.signature) ? input.signature : [input.signature],\n        input.options,\n        input.requestType\n      ]\n    });\n  }\n  async signAndExecuteTransactionBlock({\n    transactionBlock,\n    signer,\n    ...input\n  }) {\n    let transactionBytes;\n    if (transactionBlock instanceof Uint8Array) {\n      transactionBytes = transactionBlock;\n    } else {\n      transactionBlock.setSenderIfNotSet(signer.toSuiAddress());\n      transactionBytes = await transactionBlock.build({ client: this });\n    }\n    const { signature, bytes } = await signer.signTransactionBlock(transactionBytes);\n    return this.executeTransactionBlock({\n      transactionBlock: bytes,\n      signature,\n      ...input\n    });\n  }\n  /**\n   * Get total number of transactions\n   */\n  async getTotalTransactionBlocks() {\n    const resp = await this.transport.request({\n      method: \"sui_getTotalTransactionBlocks\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the reference gas price for the network\n   */\n  async getReferenceGasPrice() {\n    const resp = await this.transport.request({\n      method: \"suix_getReferenceGasPrice\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Return the delegated stakes for an address\n   */\n  async getStakes(input) {\n    if (!input.owner || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiAddress)(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({ method: \"suix_getStakes\", params: [input.owner] });\n  }\n  /**\n   * Return the delegated stakes queried by id.\n   */\n  async getStakesByIds(input) {\n    input.stakedSuiIds.forEach((id) => {\n      if (!id || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiObjectId)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiObjectId)(id))) {\n        throw new Error(`Invalid Sui Stake id ${id}`);\n      }\n    });\n    return await this.transport.request({\n      method: \"suix_getStakesByIds\",\n      params: [input.stakedSuiIds]\n    });\n  }\n  /**\n   * Return the latest system state content.\n   */\n  async getLatestSuiSystemState() {\n    return await this.transport.request({ method: \"suix_getLatestSuiSystemState\", params: [] });\n  }\n  /**\n   * Get events for a given query criteria\n   */\n  async queryEvents(input) {\n    return await this.transport.request({\n      method: \"suix_queryEvents\",\n      params: [\n        input.query,\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   */\n  async subscribeEvent(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeEvent\",\n      unsubscribe: \"suix_unsubscribeEvent\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  async subscribeTransaction(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeTransaction\",\n      unsubscribe: \"suix_unsubscribeTransaction\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   */\n  async devInspectTransactionBlock(input) {\n    let devInspectTxBytes;\n    if ((0,_builder_index_js__WEBPACK_IMPORTED_MODULE_3__.isTransactionBlock)(input.transactionBlock)) {\n      input.transactionBlock.setSenderIfNotSet(input.sender);\n      devInspectTxBytes = (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.toB64)(\n        await input.transactionBlock.build({\n          client: this,\n          onlyTransactionKind: true\n        })\n      );\n    } else if (typeof input.transactionBlock === \"string\") {\n      devInspectTxBytes = input.transactionBlock;\n    } else if (input.transactionBlock instanceof Uint8Array) {\n      devInspectTxBytes = (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.toB64)(input.transactionBlock);\n    } else {\n      throw new Error(\"Unknown transaction block format.\");\n    }\n    return await this.transport.request({\n      method: \"sui_devInspectTransactionBlock\",\n      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]\n    });\n  }\n  /**\n   * Dry run a transaction block and return the result.\n   */\n  async dryRunTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"sui_dryRunTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.toB64)(input.transactionBlock)\n      ]\n    });\n  }\n  /**\n   * Return the list of dynamic field objects owned by an object\n   */\n  async getDynamicFields(input) {\n    if (!input.parentId || !(0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.isValidSuiObjectId)((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_1__.normalizeSuiObjectId)(input.parentId))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"suix_getDynamicFields\",\n      params: [input.parentId, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Return the dynamic field object information for a specified object\n   */\n  async getDynamicFieldObject(input) {\n    return await this.transport.request({\n      method: \"suix_getDynamicFieldObject\",\n      params: [input.parentId, input.name]\n    });\n  }\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  async getLatestCheckpointSequenceNumber() {\n    const resp = await this.transport.request({\n      method: \"sui_getLatestCheckpointSequenceNumber\",\n      params: []\n    });\n    return String(resp);\n  }\n  /**\n   * Returns information about a given checkpoint\n   */\n  async getCheckpoint(input) {\n    return await this.transport.request({ method: \"sui_getCheckpoint\", params: [input.id] });\n  }\n  /**\n   * Returns historical checkpoints paginated\n   */\n  async getCheckpoints(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoints\",\n      params: [input.cursor, input?.limit, input.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCommitteeInfo(input) {\n    return await this.transport.request({\n      method: \"suix_getCommitteeInfo\",\n      params: [input?.epoch]\n    });\n  }\n  async getNetworkMetrics() {\n    return await this.transport.request({ method: \"suix_getNetworkMetrics\", params: [] });\n  }\n  async getAddressMetrics() {\n    return await this.transport.request({ method: \"suix_getLatestAddressMetrics\", params: [] });\n  }\n  async getEpochMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochMetrics\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  async getAllEpochAddressMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getAllEpochAddressMetrics\",\n      params: [input?.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getEpochs(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochs\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  /**\n   * Returns list of top move calls by usage\n   */\n  async getMoveCallMetrics() {\n    return await this.transport.request({ method: \"suix_getMoveCallMetrics\", params: [] });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCurrentEpoch() {\n    return await this.transport.request({ method: \"suix_getCurrentEpoch\", params: [] });\n  }\n  /**\n   * Return the Validators APYs\n   */\n  async getValidatorsApy() {\n    return await this.transport.request({ method: \"suix_getValidatorsApy\", params: [] });\n  }\n  // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n  async getChainIdentifier() {\n    const checkpoint = await this.getCheckpoint({ id: \"0\" });\n    const bytes = (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.fromB58)(checkpoint.digest);\n    return (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_2__.toHEX)(bytes.slice(0, 4));\n  }\n  async resolveNameServiceAddress(input) {\n    return await this.transport.request({\n      method: \"suix_resolveNameServiceAddress\",\n      params: [input.name]\n    });\n  }\n  async resolveNameServiceNames(input) {\n    return await this.transport.request({\n      method: \"suix_resolveNameServiceNames\",\n      params: [input.address, input.cursor, input.limit]\n    });\n  }\n  async getProtocolConfig(input) {\n    return await this.transport.request({\n      method: \"sui_getProtocolConfig\",\n      params: [input?.version]\n    });\n  }\n  /**\n   * Wait for a transaction block result to be available over the API.\n   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n   * be available via the API.\n   * This currently polls the `getTransactionBlock` API to check for the transaction.\n   */\n  async waitForTransactionBlock({\n    signal,\n    timeout = 60 * 1e3,\n    pollInterval = 2 * 1e3,\n    ...input\n  }) {\n    const timeoutSignal = AbortSignal.timeout(timeout);\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutSignal.addEventListener(\"abort\", () => reject(timeoutSignal.reason));\n    });\n    timeoutPromise.catch(() => {\n    });\n    while (!timeoutSignal.aborted) {\n      signal?.throwIfAborted();\n      try {\n        return await this.getTransactionBlock(input);\n      } catch (e) {\n        await Promise.race([\n          new Promise((resolve) => setTimeout(resolve, pollInterval)),\n          timeoutPromise\n        ]);\n      }\n    }\n    timeoutSignal.throwIfAborted();\n    throw new Error(\"Unexpected error while waiting for transaction block.\");\n  }\n}\n\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/client.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/errors.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/client/errors.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcError: () => (/* binding */ JsonRpcError),\n/* harmony export */   SuiHTTPStatusError: () => (/* binding */ SuiHTTPStatusError),\n/* harmony export */   SuiHTTPTransportError: () => (/* binding */ SuiHTTPTransportError)\n/* harmony export */ });\nconst CODE_TO_ERROR_TYPE = {\n  \"-32700\": \"ParseError\",\n  \"-32600\": \"InvalidRequest\",\n  \"-32601\": \"MethodNotFound\",\n  \"-32602\": \"InvalidParams\",\n  \"-32603\": \"InternalError\"\n};\nclass SuiHTTPTransportError extends Error {\n}\nclass JsonRpcError extends SuiHTTPTransportError {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = CODE_TO_ERROR_TYPE[code] ?? \"ServerError\";\n  }\n}\nclass SuiHTTPStatusError extends SuiHTTPTransportError {\n  constructor(message, status, statusText) {\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n  }\n}\n\n//# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2NsaWVudC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0Rvd25sb2Fkcy9ub2RlX21vZHVsZXMvQG15c3Rlbi9zdWkuanMvZGlzdC9lc20vY2xpZW50L2Vycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDT0RFX1RPX0VSUk9SX1RZUEUgPSB7XG4gIFwiLTMyNzAwXCI6IFwiUGFyc2VFcnJvclwiLFxuICBcIi0zMjYwMFwiOiBcIkludmFsaWRSZXF1ZXN0XCIsXG4gIFwiLTMyNjAxXCI6IFwiTWV0aG9kTm90Rm91bmRcIixcbiAgXCItMzI2MDJcIjogXCJJbnZhbGlkUGFyYW1zXCIsXG4gIFwiLTMyNjAzXCI6IFwiSW50ZXJuYWxFcnJvclwiXG59O1xuY2xhc3MgU3VpSFRUUFRyYW5zcG9ydEVycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuY2xhc3MgSnNvblJwY0Vycm9yIGV4dGVuZHMgU3VpSFRUUFRyYW5zcG9ydEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy50eXBlID0gQ09ERV9UT19FUlJPUl9UWVBFW2NvZGVdID8/IFwiU2VydmVyRXJyb3JcIjtcbiAgfVxufVxuY2xhc3MgU3VpSFRUUFN0YXR1c0Vycm9yIGV4dGVuZHMgU3VpSFRUUFRyYW5zcG9ydEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzLCBzdGF0dXNUZXh0KSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcbiAgfVxufVxuZXhwb3J0IHtcbiAgSnNvblJwY0Vycm9yLFxuICBTdWlIVFRQU3RhdHVzRXJyb3IsXG4gIFN1aUhUVFBUcmFuc3BvcnRFcnJvclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/errors.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/http-transport.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/client/http-transport.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SuiHTTPTransport: () => (/* binding */ SuiHTTPTransport)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/version.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/errors.js\");\n/* harmony import */ var _rpc_websocket_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rpc-websocket-client.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/rpc-websocket-client.js\");\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _requestId, _options, _websocketClient, _getWebsocketClient, getWebsocketClient_fn;\n\n\n\nclass SuiHTTPTransport {\n  constructor(options) {\n    __privateAdd(this, _getWebsocketClient);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _options, void 0);\n    __privateAdd(this, _websocketClient, void 0);\n    __privateSet(this, _options, options);\n  }\n  fetch(input, init) {\n    const fetch = __privateGet(this, _options).fetch ?? globalThis.fetch;\n    if (!this.fetch) {\n      throw new Error(\n        \"The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.\"\n      );\n    }\n    return fetch(input, init);\n  }\n  async request(input) {\n    __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n    const res = await this.fetch(__privateGet(this, _options).rpc?.url ?? __privateGet(this, _options).url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Client-Sdk-Type\": \"typescript\",\n        \"Client-Sdk-Version\": _version_js__WEBPACK_IMPORTED_MODULE_0__.PACKAGE_VERSION,\n        \"Client-Target-Api-Version\": _version_js__WEBPACK_IMPORTED_MODULE_0__.TARGETED_RPC_VERSION,\n        ...__privateGet(this, _options).rpc?.headers\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: __privateGet(this, _requestId),\n        method: input.method,\n        params: input.params\n      })\n    });\n    if (!res.ok) {\n      throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.SuiHTTPStatusError(\n        `Unexpected status code: ${res.status}`,\n        res.status,\n        res.statusText\n      );\n    }\n    const data = await res.json();\n    if (\"error\" in data && data.error != null) {\n      throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcError(data.error.message, data.error.code);\n    }\n    return data.result;\n  }\n  async subscribe(input) {\n    const unsubscribe = await __privateMethod(this, _getWebsocketClient, getWebsocketClient_fn).call(this).subscribe(input);\n    return async () => !!await unsubscribe();\n  }\n}\n_requestId = new WeakMap();\n_options = new WeakMap();\n_websocketClient = new WeakMap();\n_getWebsocketClient = new WeakSet();\ngetWebsocketClient_fn = function() {\n  if (!__privateGet(this, _websocketClient)) {\n    const WebSocketConstructor = __privateGet(this, _options).WebSocketConstructor ?? globalThis.WebSocket;\n    if (!WebSocketConstructor) {\n      throw new Error(\n        \"The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.\"\n      );\n    }\n    __privateSet(this, _websocketClient, new _rpc_websocket_client_js__WEBPACK_IMPORTED_MODULE_2__.WebsocketClient(\n      __privateGet(this, _options).websocket?.url ?? __privateGet(this, _options).url,\n      {\n        WebSocketConstructor: __privateGet(this, _options).WebSocketConstructor,\n        ...__privateGet(this, _options).websocket\n      }\n    ));\n  }\n  return __privateGet(this, _websocketClient);\n};\n\n//# sourceMappingURL=http-transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2NsaWVudC9odHRwLXRyYW5zcG9ydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNzRTtBQUNQO0FBQ0g7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHdEQUFlO0FBQzdDLHFDQUFxQyw2REFBb0I7QUFDekQ7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxnQkFBZ0IsMERBQWtCO0FBQ2xDLG1DQUFtQyxXQUFXO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvREFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHFFQUFlO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0Rvd25sb2Fkcy9ub2RlX21vZHVsZXMvQG15c3Rlbi9zdWkuanMvZGlzdC9lc20vY2xpZW50L2h0dHAtdHJhbnNwb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2FjY2Vzc0NoZWNrID0gKG9iaiwgbWVtYmVyLCBtc2cpID0+IHtcbiAgaWYgKCFtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IFwiICsgbXNnKTtcbn07XG52YXIgX19wcml2YXRlR2V0ID0gKG9iaiwgbWVtYmVyLCBnZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJyZWFkIGZyb20gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgcmV0dXJuIGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiBtZW1iZXIuZ2V0KG9iaik7XG59O1xudmFyIF9fcHJpdmF0ZUFkZCA9IChvYmosIG1lbWJlciwgdmFsdWUpID0+IHtcbiAgaWYgKG1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpO1xuICBtZW1iZXIgaW5zdGFuY2VvZiBXZWFrU2V0ID8gbWVtYmVyLmFkZChvYmopIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbn07XG52YXIgX19wcml2YXRlU2V0ID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSwgc2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgc2V0dGVyID8gc2V0dGVyLmNhbGwob2JqLCB2YWx1ZSkgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIF9fcHJpdmF0ZU1ldGhvZCA9IChvYmosIG1lbWJlciwgbWV0aG9kKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwiYWNjZXNzIHByaXZhdGUgbWV0aG9kXCIpO1xuICByZXR1cm4gbWV0aG9kO1xufTtcbnZhciBfcmVxdWVzdElkLCBfb3B0aW9ucywgX3dlYnNvY2tldENsaWVudCwgX2dldFdlYnNvY2tldENsaWVudCwgZ2V0V2Vic29ja2V0Q2xpZW50X2ZuO1xuaW1wb3J0IHsgUEFDS0FHRV9WRVJTSU9OLCBUQVJHRVRFRF9SUENfVkVSU0lPTiB9IGZyb20gXCIuLi92ZXJzaW9uLmpzXCI7XG5pbXBvcnQgeyBKc29uUnBjRXJyb3IsIFN1aUhUVFBTdGF0dXNFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsgV2Vic29ja2V0Q2xpZW50IH0gZnJvbSBcIi4vcnBjLXdlYnNvY2tldC1jbGllbnQuanNcIjtcbmNsYXNzIFN1aUhUVFBUcmFuc3BvcnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9nZXRXZWJzb2NrZXRDbGllbnQpO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfcmVxdWVzdElkLCAwKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX29wdGlvbnMsIHZvaWQgMCk7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF93ZWJzb2NrZXRDbGllbnQsIHZvaWQgMCk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9vcHRpb25zLCBvcHRpb25zKTtcbiAgfVxuICBmZXRjaChpbnB1dCwgaW5pdCkge1xuICAgIGNvbnN0IGZldGNoID0gX19wcml2YXRlR2V0KHRoaXMsIF9vcHRpb25zKS5mZXRjaCA/PyBnbG9iYWxUaGlzLmZldGNoO1xuICAgIGlmICghdGhpcy5mZXRjaCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlRoZSBjdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZmV0Y2gsIHlvdSBjYW4gcHJvdmlkZSBhIGZldGNoIGltcGxlbWVudGF0aW9uIGluIHRoZSBvcHRpb25zIGZvciBTdWlIVFRQVHJhbnNwb3J0LlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpO1xuICB9XG4gIGFzeW5jIHJlcXVlc3QoaW5wdXQpIHtcbiAgICBfX3ByaXZhdGVTZXQodGhpcywgX3JlcXVlc3RJZCwgX19wcml2YXRlR2V0KHRoaXMsIF9yZXF1ZXN0SWQpICsgMSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChfX3ByaXZhdGVHZXQodGhpcywgX29wdGlvbnMpLnJwYz8udXJsID8/IF9fcHJpdmF0ZUdldCh0aGlzLCBfb3B0aW9ucykudXJsLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJDbGllbnQtU2RrLVR5cGVcIjogXCJ0eXBlc2NyaXB0XCIsXG4gICAgICAgIFwiQ2xpZW50LVNkay1WZXJzaW9uXCI6IFBBQ0tBR0VfVkVSU0lPTixcbiAgICAgICAgXCJDbGllbnQtVGFyZ2V0LUFwaS1WZXJzaW9uXCI6IFRBUkdFVEVEX1JQQ19WRVJTSU9OLFxuICAgICAgICAuLi5fX3ByaXZhdGVHZXQodGhpcywgX29wdGlvbnMpLnJwYz8uaGVhZGVyc1xuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgaWQ6IF9fcHJpdmF0ZUdldCh0aGlzLCBfcmVxdWVzdElkKSxcbiAgICAgICAgbWV0aG9kOiBpbnB1dC5tZXRob2QsXG4gICAgICAgIHBhcmFtczogaW5wdXQucGFyYW1zXG4gICAgICB9KVxuICAgIH0pO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgU3VpSFRUUFN0YXR1c0Vycm9yKFxuICAgICAgICBgVW5leHBlY3RlZCBzdGF0dXMgY29kZTogJHtyZXMuc3RhdHVzfWAsXG4gICAgICAgIHJlcy5zdGF0dXMsXG4gICAgICAgIHJlcy5zdGF0dXNUZXh0XG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAoXCJlcnJvclwiIGluIGRhdGEgJiYgZGF0YS5lcnJvciAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvblJwY0Vycm9yKGRhdGEuZXJyb3IubWVzc2FnZSwgZGF0YS5lcnJvci5jb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEucmVzdWx0O1xuICB9XG4gIGFzeW5jIHN1YnNjcmliZShpbnB1dCkge1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gYXdhaXQgX19wcml2YXRlTWV0aG9kKHRoaXMsIF9nZXRXZWJzb2NrZXRDbGllbnQsIGdldFdlYnNvY2tldENsaWVudF9mbikuY2FsbCh0aGlzKS5zdWJzY3JpYmUoaW5wdXQpO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiAhIWF3YWl0IHVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbl9yZXF1ZXN0SWQgPSBuZXcgV2Vha01hcCgpO1xuX29wdGlvbnMgPSBuZXcgV2Vha01hcCgpO1xuX3dlYnNvY2tldENsaWVudCA9IG5ldyBXZWFrTWFwKCk7XG5fZ2V0V2Vic29ja2V0Q2xpZW50ID0gbmV3IFdlYWtTZXQoKTtcbmdldFdlYnNvY2tldENsaWVudF9mbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIV9fcHJpdmF0ZUdldCh0aGlzLCBfd2Vic29ja2V0Q2xpZW50KSkge1xuICAgIGNvbnN0IFdlYlNvY2tldENvbnN0cnVjdG9yID0gX19wcml2YXRlR2V0KHRoaXMsIF9vcHRpb25zKS5XZWJTb2NrZXRDb25zdHJ1Y3RvciA/PyBnbG9iYWxUaGlzLldlYlNvY2tldDtcbiAgICBpZiAoIVdlYlNvY2tldENvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiVGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBXZWJTb2NrZXQsIHlvdSBjYW4gcHJvdmlkZSBhIFdlYlNvY2tldENvbnN0cnVjdG9yIGluIHRoZSBvcHRpb25zIGZvciBTdWlIVFRQVHJhbnNwb3J0LlwiXG4gICAgICApO1xuICAgIH1cbiAgICBfX3ByaXZhdGVTZXQodGhpcywgX3dlYnNvY2tldENsaWVudCwgbmV3IFdlYnNvY2tldENsaWVudChcbiAgICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfb3B0aW9ucykud2Vic29ja2V0Py51cmwgPz8gX19wcml2YXRlR2V0KHRoaXMsIF9vcHRpb25zKS51cmwsXG4gICAgICB7XG4gICAgICAgIFdlYlNvY2tldENvbnN0cnVjdG9yOiBfX3ByaXZhdGVHZXQodGhpcywgX29wdGlvbnMpLldlYlNvY2tldENvbnN0cnVjdG9yLFxuICAgICAgICAuLi5fX3ByaXZhdGVHZXQodGhpcywgX29wdGlvbnMpLndlYnNvY2tldFxuICAgICAgfVxuICAgICkpO1xuICB9XG4gIHJldHVybiBfX3ByaXZhdGVHZXQodGhpcywgX3dlYnNvY2tldENsaWVudCk7XG59O1xuZXhwb3J0IHtcbiAgU3VpSFRUUFRyYW5zcG9ydFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAtdHJhbnNwb3J0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/http-transport.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/rpc-websocket-client.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/client/rpc-websocket-client.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CLIENT_OPTIONS: () => (/* binding */ DEFAULT_CLIENT_OPTIONS),\n/* harmony export */   WebsocketClient: () => (/* binding */ WebsocketClient)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/errors.js\");\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _requestId, _disconnects, _webSocket, _connectionPromise, _subscriptions, _pendingRequests, _setupWebSocket, setupWebSocket_fn, _reconnect, reconnect_fn;\n\nfunction getWebsocketUrl(httpUrl) {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace(\"http\", \"ws\");\n  return url.toString();\n}\nconst DEFAULT_CLIENT_OPTIONS = {\n  // We fudge the typing because we also check for undefined in the constructor:\n  WebSocketConstructor: typeof WebSocket !== \"undefined\" ? WebSocket : void 0,\n  callTimeout: 3e4,\n  reconnectTimeout: 3e3,\n  maxReconnects: 5\n};\nclass WebsocketClient {\n  constructor(endpoint, options = {}) {\n    __privateAdd(this, _setupWebSocket);\n    __privateAdd(this, _reconnect);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _disconnects, 0);\n    __privateAdd(this, _webSocket, null);\n    __privateAdd(this, _connectionPromise, null);\n    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Set());\n    __privateAdd(this, _pendingRequests, /* @__PURE__ */ new Map());\n    this.endpoint = endpoint;\n    this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n    if (!this.options.WebSocketConstructor) {\n      throw new Error(\"Missing WebSocket constructor\");\n    }\n    if (this.endpoint.startsWith(\"http\")) {\n      this.endpoint = getWebsocketUrl(this.endpoint);\n    }\n  }\n  async makeRequest(method, params) {\n    const webSocket = await __privateMethod(this, _setupWebSocket, setupWebSocket_fn).call(this);\n    return new Promise((resolve, reject) => {\n      __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n      __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));\n          reject(new Error(`Request timeout: ${method}`));\n        }, this.options.callTimeout)\n      });\n      webSocket.send(JSON.stringify({ jsonrpc: \"2.0\", id: __privateGet(this, _requestId), method, params }));\n    }).then(({ error, result }) => {\n      if (error) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcError(error.message, error.code);\n      }\n      return result;\n    });\n  }\n  async subscribe(input) {\n    const subscription = new RpcSubscription(input);\n    __privateGet(this, _subscriptions).add(subscription);\n    await subscription.subscribe(this);\n    return () => subscription.unsubscribe(this);\n  }\n}\n_requestId = new WeakMap();\n_disconnects = new WeakMap();\n_webSocket = new WeakMap();\n_connectionPromise = new WeakMap();\n_subscriptions = new WeakMap();\n_pendingRequests = new WeakMap();\n_setupWebSocket = new WeakSet();\nsetupWebSocket_fn = function() {\n  if (__privateGet(this, _connectionPromise)) {\n    return __privateGet(this, _connectionPromise);\n  }\n  __privateSet(this, _connectionPromise, new Promise((resolve) => {\n    __privateGet(this, _webSocket)?.close();\n    __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));\n    __privateGet(this, _webSocket).addEventListener(\"open\", () => {\n      __privateSet(this, _disconnects, 0);\n      resolve(__privateGet(this, _webSocket));\n    });\n    __privateGet(this, _webSocket).addEventListener(\"close\", () => {\n      __privateWrapper(this, _disconnects)._++;\n      if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {\n        setTimeout(() => {\n          __privateMethod(this, _reconnect, reconnect_fn).call(this);\n        }, this.options.reconnectTimeout);\n      }\n    });\n    __privateGet(this, _webSocket).addEventListener(\"message\", ({ data }) => {\n      let json;\n      try {\n        json = JSON.parse(data);\n      } catch (error) {\n        console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n        return;\n      }\n      if (\"id\" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {\n        const { resolve: resolve2, timeout } = __privateGet(this, _pendingRequests).get(json.id);\n        clearTimeout(timeout);\n        resolve2(json);\n      } else if (\"params\" in json) {\n        const { params } = json;\n        __privateGet(this, _subscriptions).forEach((subscription) => {\n          if (subscription.subscriptionId === params.subscription) {\n            if (params.subscription === subscription.subscriptionId) {\n              subscription.onMessage(params.result);\n            }\n          }\n        });\n      }\n    });\n  }));\n  return __privateGet(this, _connectionPromise);\n};\n_reconnect = new WeakSet();\nreconnect_fn = async function() {\n  __privateGet(this, _webSocket)?.close();\n  __privateSet(this, _connectionPromise, null);\n  return Promise.allSettled(\n    [...__privateGet(this, _subscriptions)].map((subscription) => subscription.subscribe(this))\n  );\n};\nclass RpcSubscription {\n  constructor(input) {\n    this.subscriptionId = null;\n    this.subscribed = false;\n    this.input = input;\n  }\n  onMessage(message) {\n    if (this.subscribed) {\n      this.input.onMessage(message);\n    }\n  }\n  async unsubscribe(client) {\n    const { subscriptionId } = this;\n    this.subscribed = false;\n    if (subscriptionId == null)\n      return false;\n    this.subscriptionId = null;\n    return client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n  }\n  async subscribe(client) {\n    this.subscriptionId = null;\n    this.subscribed = true;\n    const newSubscriptionId = await client.makeRequest(\n      this.input.method,\n      this.input.params\n    );\n    if (this.subscribed) {\n      this.subscriptionId = newSubscriptionId;\n    }\n  }\n}\n\n//# sourceMappingURL=rpc-websocket-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL2NsaWVudC9ycGMtd2Vic29ja2V0LWNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE9BQU87QUFDdEQsU0FBUztBQUNULE9BQU87QUFDUCxzQ0FBc0Msb0VBQW9FO0FBQzFHLEtBQUssVUFBVSxlQUFlO0FBQzlCO0FBQ0Esa0JBQWtCLG9EQUFZO0FBQzlCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxrRUFBa0UsTUFBTTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsZ0VBQWdFLEtBQUssS0FBSyxjQUFjO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2QkFBNkI7QUFDN0M7QUFDQTtBQUNBLFFBQVE7QUFDUixnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG93bmxvYWRzL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS5qcy9kaXN0L2VzbS9jbGllbnQvcnBjLXdlYnNvY2tldC1jbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYWNjZXNzQ2hlY2sgPSAob2JqLCBtZW1iZXIsIG1zZykgPT4ge1xuICBpZiAoIW1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgXCIgKyBtc2cpO1xufTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcInJlYWQgZnJvbSBwcml2YXRlIGZpZWxkXCIpO1xuICByZXR1cm4gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IG1lbWJlci5nZXQob2JqKTtcbn07XG52YXIgX19wcml2YXRlQWRkID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSkgPT4ge1xuICBpZiAobWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgdGhlIHNhbWUgcHJpdmF0ZSBtZW1iZXIgbW9yZSB0aGFuIG9uY2VcIik7XG4gIG1lbWJlciBpbnN0YW5jZW9mIFdlYWtTZXQgPyBtZW1iZXIuYWRkKG9iaikgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xufTtcbnZhciBfX3ByaXZhdGVTZXQgPSAob2JqLCBtZW1iZXIsIHZhbHVlLCBzZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJ3cml0ZSB0byBwcml2YXRlIGZpZWxkXCIpO1xuICBzZXR0ZXIgPyBzZXR0ZXIuY2FsbChvYmosIHZhbHVlKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgX19wcml2YXRlV3JhcHBlciA9IChvYmosIG1lbWJlciwgc2V0dGVyLCBnZXR0ZXIpID0+ICh7XG4gIHNldCBfKHZhbHVlKSB7XG4gICAgX19wcml2YXRlU2V0KG9iaiwgbWVtYmVyLCB2YWx1ZSwgc2V0dGVyKTtcbiAgfSxcbiAgZ2V0IF8oKSB7XG4gICAgcmV0dXJuIF9fcHJpdmF0ZUdldChvYmosIG1lbWJlciwgZ2V0dGVyKTtcbiAgfVxufSk7XG52YXIgX19wcml2YXRlTWV0aG9kID0gKG9iaiwgbWVtYmVyLCBtZXRob2QpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJhY2Nlc3MgcHJpdmF0ZSBtZXRob2RcIik7XG4gIHJldHVybiBtZXRob2Q7XG59O1xudmFyIF9yZXF1ZXN0SWQsIF9kaXNjb25uZWN0cywgX3dlYlNvY2tldCwgX2Nvbm5lY3Rpb25Qcm9taXNlLCBfc3Vic2NyaXB0aW9ucywgX3BlbmRpbmdSZXF1ZXN0cywgX3NldHVwV2ViU29ja2V0LCBzZXR1cFdlYlNvY2tldF9mbiwgX3JlY29ubmVjdCwgcmVjb25uZWN0X2ZuO1xuaW1wb3J0IHsgSnNvblJwY0Vycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5mdW5jdGlvbiBnZXRXZWJzb2NrZXRVcmwoaHR0cFVybCkge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKGh0dHBVcmwpO1xuICB1cmwucHJvdG9jb2wgPSB1cmwucHJvdG9jb2wucmVwbGFjZShcImh0dHBcIiwgXCJ3c1wiKTtcbiAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuY29uc3QgREVGQVVMVF9DTElFTlRfT1BUSU9OUyA9IHtcbiAgLy8gV2UgZnVkZ2UgdGhlIHR5cGluZyBiZWNhdXNlIHdlIGFsc28gY2hlY2sgZm9yIHVuZGVmaW5lZCBpbiB0aGUgY29uc3RydWN0b3I6XG4gIFdlYlNvY2tldENvbnN0cnVjdG9yOiB0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiID8gV2ViU29ja2V0IDogdm9pZCAwLFxuICBjYWxsVGltZW91dDogM2U0LFxuICByZWNvbm5lY3RUaW1lb3V0OiAzZTMsXG4gIG1heFJlY29ubmVjdHM6IDVcbn07XG5jbGFzcyBXZWJzb2NrZXRDbGllbnQge1xuICBjb25zdHJ1Y3RvcihlbmRwb2ludCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9zZXR1cFdlYlNvY2tldCk7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9yZWNvbm5lY3QpO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfcmVxdWVzdElkLCAwKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX2Rpc2Nvbm5lY3RzLCAwKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX3dlYlNvY2tldCwgbnVsbCk7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9jb25uZWN0aW9uUHJvbWlzZSwgbnVsbCk7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9zdWJzY3JpcHRpb25zLCAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX3BlbmRpbmdSZXF1ZXN0cywgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4uREVGQVVMVF9DTElFTlRfT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xuICAgIGlmICghdGhpcy5vcHRpb25zLldlYlNvY2tldENvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIFdlYlNvY2tldCBjb25zdHJ1Y3RvclwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZW5kcG9pbnQuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgIHRoaXMuZW5kcG9pbnQgPSBnZXRXZWJzb2NrZXRVcmwodGhpcy5lbmRwb2ludCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIG1ha2VSZXF1ZXN0KG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgY29uc3Qgd2ViU29ja2V0ID0gYXdhaXQgX19wcml2YXRlTWV0aG9kKHRoaXMsIF9zZXR1cFdlYlNvY2tldCwgc2V0dXBXZWJTb2NrZXRfZm4pLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfcmVxdWVzdElkLCBfX3ByaXZhdGVHZXQodGhpcywgX3JlcXVlc3RJZCkgKyAxKTtcbiAgICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfcGVuZGluZ1JlcXVlc3RzKS5zZXQoX19wcml2YXRlR2V0KHRoaXMsIF9yZXF1ZXN0SWQpLCB7XG4gICAgICAgIHJlc29sdmUsXG4gICAgICAgIHJlamVjdCxcbiAgICAgICAgdGltZW91dDogc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgX19wcml2YXRlR2V0KHRoaXMsIF9wZW5kaW5nUmVxdWVzdHMpLmRlbGV0ZShfX3ByaXZhdGVHZXQodGhpcywgX3JlcXVlc3RJZCkpO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFJlcXVlc3QgdGltZW91dDogJHttZXRob2R9YCkpO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMuY2FsbFRpbWVvdXQpXG4gICAgICB9KTtcbiAgICAgIHdlYlNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHsganNvbnJwYzogXCIyLjBcIiwgaWQ6IF9fcHJpdmF0ZUdldCh0aGlzLCBfcmVxdWVzdElkKSwgbWV0aG9kLCBwYXJhbXMgfSkpO1xuICAgIH0pLnRoZW4oKHsgZXJyb3IsIHJlc3VsdCB9KSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25ScGNFcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvci5jb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgc3Vic2NyaWJlKGlucHV0KSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gbmV3IFJwY1N1YnNjcmlwdGlvbihpbnB1dCk7XG4gICAgX19wcml2YXRlR2V0KHRoaXMsIF9zdWJzY3JpcHRpb25zKS5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICBhd2FpdCBzdWJzY3JpcHRpb24uc3Vic2NyaWJlKHRoaXMpO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUodGhpcyk7XG4gIH1cbn1cbl9yZXF1ZXN0SWQgPSBuZXcgV2Vha01hcCgpO1xuX2Rpc2Nvbm5lY3RzID0gbmV3IFdlYWtNYXAoKTtcbl93ZWJTb2NrZXQgPSBuZXcgV2Vha01hcCgpO1xuX2Nvbm5lY3Rpb25Qcm9taXNlID0gbmV3IFdlYWtNYXAoKTtcbl9zdWJzY3JpcHRpb25zID0gbmV3IFdlYWtNYXAoKTtcbl9wZW5kaW5nUmVxdWVzdHMgPSBuZXcgV2Vha01hcCgpO1xuX3NldHVwV2ViU29ja2V0ID0gbmV3IFdlYWtTZXQoKTtcbnNldHVwV2ViU29ja2V0X2ZuID0gZnVuY3Rpb24oKSB7XG4gIGlmIChfX3ByaXZhdGVHZXQodGhpcywgX2Nvbm5lY3Rpb25Qcm9taXNlKSkge1xuICAgIHJldHVybiBfX3ByaXZhdGVHZXQodGhpcywgX2Nvbm5lY3Rpb25Qcm9taXNlKTtcbiAgfVxuICBfX3ByaXZhdGVTZXQodGhpcywgX2Nvbm5lY3Rpb25Qcm9taXNlLCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfd2ViU29ja2V0KT8uY2xvc2UoKTtcbiAgICBfX3ByaXZhdGVTZXQodGhpcywgX3dlYlNvY2tldCwgbmV3IHRoaXMub3B0aW9ucy5XZWJTb2NrZXRDb25zdHJ1Y3Rvcih0aGlzLmVuZHBvaW50KSk7XG4gICAgX19wcml2YXRlR2V0KHRoaXMsIF93ZWJTb2NrZXQpLmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsICgpID0+IHtcbiAgICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfZGlzY29ubmVjdHMsIDApO1xuICAgICAgcmVzb2x2ZShfX3ByaXZhdGVHZXQodGhpcywgX3dlYlNvY2tldCkpO1xuICAgIH0pO1xuICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfd2ViU29ja2V0KS5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgICAgX19wcml2YXRlV3JhcHBlcih0aGlzLCBfZGlzY29ubmVjdHMpLl8rKztcbiAgICAgIGlmIChfX3ByaXZhdGVHZXQodGhpcywgX2Rpc2Nvbm5lY3RzKSA8PSB0aGlzLm9wdGlvbnMubWF4UmVjb25uZWN0cykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBfX3ByaXZhdGVNZXRob2QodGhpcywgX3JlY29ubmVjdCwgcmVjb25uZWN0X2ZuKS5jYWxsKHRoaXMpO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMucmVjb25uZWN0VGltZW91dCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX19wcml2YXRlR2V0KHRoaXMsIF93ZWJTb2NrZXQpLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsICh7IGRhdGEgfSkgPT4ge1xuICAgICAgbGV0IGpzb247XG4gICAgICB0cnkge1xuICAgICAgICBqc29uID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgUlBDIG1lc3NhZ2U6ICR7ZGF0YX1gLCB7IGNhdXNlOiBlcnJvciB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChcImlkXCIgaW4ganNvbiAmJiBqc29uLmlkICE9IG51bGwgJiYgX19wcml2YXRlR2V0KHRoaXMsIF9wZW5kaW5nUmVxdWVzdHMpLmhhcyhqc29uLmlkKSkge1xuICAgICAgICBjb25zdCB7IHJlc29sdmU6IHJlc29sdmUyLCB0aW1lb3V0IH0gPSBfX3ByaXZhdGVHZXQodGhpcywgX3BlbmRpbmdSZXF1ZXN0cykuZ2V0KGpzb24uaWQpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHJlc29sdmUyKGpzb24pO1xuICAgICAgfSBlbHNlIGlmIChcInBhcmFtc1wiIGluIGpzb24pIHtcbiAgICAgICAgY29uc3QgeyBwYXJhbXMgfSA9IGpzb247XG4gICAgICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfc3Vic2NyaXB0aW9ucykuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25JZCA9PT0gcGFyYW1zLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5zdWJzY3JpcHRpb24gPT09IHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25JZCkge1xuICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ub25NZXNzYWdlKHBhcmFtcy5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pKTtcbiAgcmV0dXJuIF9fcHJpdmF0ZUdldCh0aGlzLCBfY29ubmVjdGlvblByb21pc2UpO1xufTtcbl9yZWNvbm5lY3QgPSBuZXcgV2Vha1NldCgpO1xucmVjb25uZWN0X2ZuID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIF9fcHJpdmF0ZUdldCh0aGlzLCBfd2ViU29ja2V0KT8uY2xvc2UoKTtcbiAgX19wcml2YXRlU2V0KHRoaXMsIF9jb25uZWN0aW9uUHJvbWlzZSwgbnVsbCk7XG4gIHJldHVybiBQcm9taXNlLmFsbFNldHRsZWQoXG4gICAgWy4uLl9fcHJpdmF0ZUdldCh0aGlzLCBfc3Vic2NyaXB0aW9ucyldLm1hcCgoc3Vic2NyaXB0aW9uKSA9PiBzdWJzY3JpcHRpb24uc3Vic2NyaWJlKHRoaXMpKVxuICApO1xufTtcbmNsYXNzIFJwY1N1YnNjcmlwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25JZCA9IG51bGw7XG4gICAgdGhpcy5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICB9XG4gIG9uTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlZCkge1xuICAgICAgdGhpcy5pbnB1dC5vbk1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHVuc3Vic2NyaWJlKGNsaWVudCkge1xuICAgIGNvbnN0IHsgc3Vic2NyaXB0aW9uSWQgfSA9IHRoaXM7XG4gICAgdGhpcy5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgaWYgKHN1YnNjcmlwdGlvbklkID09IG51bGwpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25JZCA9IG51bGw7XG4gICAgcmV0dXJuIGNsaWVudC5tYWtlUmVxdWVzdCh0aGlzLmlucHV0LnVuc3Vic2NyaWJlLCBbc3Vic2NyaXB0aW9uSWRdKTtcbiAgfVxuICBhc3luYyBzdWJzY3JpYmUoY2xpZW50KSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25JZCA9IG51bGw7XG4gICAgdGhpcy5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBjb25zdCBuZXdTdWJzY3JpcHRpb25JZCA9IGF3YWl0IGNsaWVudC5tYWtlUmVxdWVzdChcbiAgICAgIHRoaXMuaW5wdXQubWV0aG9kLFxuICAgICAgdGhpcy5pbnB1dC5wYXJhbXNcbiAgICApO1xuICAgIGlmICh0aGlzLnN1YnNjcmliZWQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uSWQgPSBuZXdTdWJzY3JpcHRpb25JZDtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCB7XG4gIERFRkFVTFRfQ0xJRU5UX09QVElPTlMsXG4gIFdlYnNvY2tldENsaWVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJwYy13ZWJzb2NrZXQtY2xpZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/client/rpc-websocket-client.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/common.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/types/common.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectOwner: () => (/* binding */ ObjectOwner),\n/* harmony export */   ProtocolConfig: () => (/* binding */ ProtocolConfig),\n/* harmony export */   SuiJsonValue: () => (/* binding */ SuiJsonValue)\n/* harmony export */ });\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n\nconst ObjectOwner = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    AddressOwner: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    ObjectOwner: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    Shared: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n      initial_shared_version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())\n    })\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Immutable\")\n]);\nconst SuiJsonValue = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.define)(\"SuiJsonValue\", () => true);\nconst ProtocolConfigValue = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ u32: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)() }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ u64: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)() }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ f64: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)() })\n]);\nconst ProtocolConfig = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  attributes: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)(ProtocolConfigValue)),\n  featureFlags: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)()),\n  maxSupportedProtocolVersion: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  minSupportedProtocolVersion: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  protocolVersion: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n});\n\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL3R5cGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdHO0FBQ2hHLG9CQUFvQixrREFBSztBQUN6QixFQUFFLG1EQUFNO0FBQ1Isa0JBQWtCLG1EQUFNO0FBQ3hCLEdBQUc7QUFDSCxFQUFFLG1EQUFNO0FBQ1IsaUJBQWlCLG1EQUFNO0FBQ3ZCLEdBQUc7QUFDSCxFQUFFLG1EQUFNO0FBQ1IsWUFBWSxtREFBTTtBQUNsQiw4QkFBOEIscURBQVEsQ0FBQyxtREFBTTtBQUM3QyxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsb0RBQU87QUFDVDtBQUNBLHFCQUFxQixtREFBTTtBQUMzQiw0QkFBNEIsa0RBQUs7QUFDakMsRUFBRSxtREFBTSxHQUFHLEtBQUssbURBQU0sSUFBSTtBQUMxQixFQUFFLG1EQUFNLEdBQUcsS0FBSyxtREFBTSxJQUFJO0FBQzFCLEVBQUUsbURBQU0sR0FBRyxLQUFLLG1EQUFNLElBQUk7QUFDMUI7QUFDQSx1QkFBdUIsbURBQU07QUFDN0IsY0FBYyxtREFBTSxDQUFDLG1EQUFNLElBQUkscURBQVE7QUFDdkMsZ0JBQWdCLG1EQUFNLENBQUMsbURBQU0sSUFBSSxvREFBTztBQUN4QywrQkFBK0IsbURBQU07QUFDckMsK0JBQStCLG1EQUFNO0FBQ3JDLG1CQUFtQixtREFBTTtBQUN6QixDQUFDO0FBS0M7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG93bmxvYWRzL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS5qcy9kaXN0L2VzbS90eXBlcy9jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbiwgZGVmaW5lLCBsaXRlcmFsLCBudWxsYWJsZSwgb2JqZWN0LCByZWNvcmQsIHN0cmluZywgdW5pb24gfSBmcm9tIFwic3VwZXJzdHJ1Y3RcIjtcbmNvbnN0IE9iamVjdE93bmVyID0gdW5pb24oW1xuICBvYmplY3Qoe1xuICAgIEFkZHJlc3NPd25lcjogc3RyaW5nKClcbiAgfSksXG4gIG9iamVjdCh7XG4gICAgT2JqZWN0T3duZXI6IHN0cmluZygpXG4gIH0pLFxuICBvYmplY3Qoe1xuICAgIFNoYXJlZDogb2JqZWN0KHtcbiAgICAgIGluaXRpYWxfc2hhcmVkX3ZlcnNpb246IG51bGxhYmxlKHN0cmluZygpKVxuICAgIH0pXG4gIH0pLFxuICBsaXRlcmFsKFwiSW1tdXRhYmxlXCIpXG5dKTtcbmNvbnN0IFN1aUpzb25WYWx1ZSA9IGRlZmluZShcIlN1aUpzb25WYWx1ZVwiLCAoKSA9PiB0cnVlKTtcbmNvbnN0IFByb3RvY29sQ29uZmlnVmFsdWUgPSB1bmlvbihbXG4gIG9iamVjdCh7IHUzMjogc3RyaW5nKCkgfSksXG4gIG9iamVjdCh7IHU2NDogc3RyaW5nKCkgfSksXG4gIG9iamVjdCh7IGY2NDogc3RyaW5nKCkgfSlcbl0pO1xuY29uc3QgUHJvdG9jb2xDb25maWcgPSBvYmplY3Qoe1xuICBhdHRyaWJ1dGVzOiByZWNvcmQoc3RyaW5nKCksIG51bGxhYmxlKFByb3RvY29sQ29uZmlnVmFsdWUpKSxcbiAgZmVhdHVyZUZsYWdzOiByZWNvcmQoc3RyaW5nKCksIGJvb2xlYW4oKSksXG4gIG1heFN1cHBvcnRlZFByb3RvY29sVmVyc2lvbjogc3RyaW5nKCksXG4gIG1pblN1cHBvcnRlZFByb3RvY29sVmVyc2lvbjogc3RyaW5nKCksXG4gIHByb3RvY29sVmVyc2lvbjogc3RyaW5nKClcbn0pO1xuZXhwb3J0IHtcbiAgT2JqZWN0T3duZXIsXG4gIFByb3RvY29sQ29uZmlnLFxuICBTdWlKc29uVmFsdWVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/common.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/normalized.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/types/normalized.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MoveCallMetric: () => (/* binding */ MoveCallMetric),\n/* harmony export */   MoveCallMetrics: () => (/* binding */ MoveCallMetrics),\n/* harmony export */   SuiMoveAbilitySet: () => (/* binding */ SuiMoveAbilitySet),\n/* harmony export */   SuiMoveFunctionArgType: () => (/* binding */ SuiMoveFunctionArgType),\n/* harmony export */   SuiMoveFunctionArgTypes: () => (/* binding */ SuiMoveFunctionArgTypes),\n/* harmony export */   SuiMoveModuleId: () => (/* binding */ SuiMoveModuleId),\n/* harmony export */   SuiMoveNormalizedField: () => (/* binding */ SuiMoveNormalizedField),\n/* harmony export */   SuiMoveNormalizedFunction: () => (/* binding */ SuiMoveNormalizedFunction),\n/* harmony export */   SuiMoveNormalizedModule: () => (/* binding */ SuiMoveNormalizedModule),\n/* harmony export */   SuiMoveNormalizedModules: () => (/* binding */ SuiMoveNormalizedModules),\n/* harmony export */   SuiMoveNormalizedStruct: () => (/* binding */ SuiMoveNormalizedStruct),\n/* harmony export */   SuiMoveNormalizedStructType: () => (/* binding */ SuiMoveNormalizedStructType),\n/* harmony export */   SuiMoveNormalizedType: () => (/* binding */ SuiMoveNormalizedType),\n/* harmony export */   SuiMoveNormalizedTypeParameterType: () => (/* binding */ SuiMoveNormalizedTypeParameterType),\n/* harmony export */   SuiMoveStructTypeParameter: () => (/* binding */ SuiMoveStructTypeParameter),\n/* harmony export */   SuiMoveVisibility: () => (/* binding */ SuiMoveVisibility),\n/* harmony export */   extractMutableReference: () => (/* binding */ extractMutableReference),\n/* harmony export */   extractReference: () => (/* binding */ extractReference),\n/* harmony export */   extractStructTag: () => (/* binding */ extractStructTag)\n/* harmony export */ });\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n\nconst SuiMoveFunctionArgType = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ Object: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)() })]);\nconst SuiMoveFunctionArgTypes = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveFunctionArgType);\nconst SuiMoveModuleId = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  address: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  name: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n});\nconst SuiMoveVisibility = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Private\"), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Public\"), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Friend\")]);\nconst SuiMoveAbilitySet = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  abilities: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())\n});\nconst SuiMoveStructTypeParameter = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  constraints: SuiMoveAbilitySet,\n  isPhantom: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)()\n});\nconst SuiMoveNormalizedTypeParameterType = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  TypeParameter: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)()\n});\nconst MoveCallMetric = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.tuple)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    module: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n    package: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n    function: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n]);\nconst MoveCallMetrics = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  rank3Days: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(MoveCallMetric),\n  rank7Days: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(MoveCallMetric),\n  rank30Days: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(MoveCallMetric)\n});\nfunction isSuiMoveNormalizedType(value) {\n  if (!value)\n    return false;\n  if (typeof value === \"string\")\n    return true;\n  if ((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(value, SuiMoveNormalizedTypeParameterType))\n    return true;\n  if (isSuiMoveNormalizedStructType(value))\n    return true;\n  if (typeof value !== \"object\")\n    return false;\n  const valueProperties = value;\n  if ((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(valueProperties.Reference, SuiMoveNormalizedType))\n    return true;\n  if ((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(valueProperties.MutableReference, SuiMoveNormalizedType))\n    return true;\n  if ((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(valueProperties.Vector, SuiMoveNormalizedType))\n    return true;\n  return false;\n}\nconst SuiMoveNormalizedType = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.define)(\n  \"SuiMoveNormalizedType\",\n  isSuiMoveNormalizedType\n);\nfunction isSuiMoveNormalizedStructType(value) {\n  if (!value || typeof value !== \"object\")\n    return false;\n  const valueProperties = value;\n  if (!valueProperties.Struct || typeof valueProperties.Struct !== \"object\")\n    return false;\n  const structProperties = valueProperties.Struct;\n  if (typeof structProperties.address !== \"string\" || typeof structProperties.module !== \"string\" || typeof structProperties.name !== \"string\" || !Array.isArray(structProperties.typeArguments) || !structProperties.typeArguments.every((value2) => isSuiMoveNormalizedType(value2))) {\n    return false;\n  }\n  return true;\n}\nconst SuiMoveNormalizedStructType = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.define)(\n  \"SuiMoveNormalizedStructType\",\n  isSuiMoveNormalizedStructType\n);\nconst SuiMoveNormalizedFunction = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  visibility: SuiMoveVisibility,\n  isEntry: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)(),\n  typeParameters: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveAbilitySet),\n  parameters: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveNormalizedType),\n  return: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveNormalizedType)\n});\nconst SuiMoveNormalizedField = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  name: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  type: SuiMoveNormalizedType\n});\nconst SuiMoveNormalizedStruct = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  abilities: SuiMoveAbilitySet,\n  typeParameters: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveStructTypeParameter),\n  fields: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveNormalizedField)\n});\nconst SuiMoveNormalizedModule = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  fileFormatVersion: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)(),\n  address: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  name: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  friends: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiMoveModuleId),\n  structs: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), SuiMoveNormalizedStruct),\n  exposedFunctions: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), SuiMoveNormalizedFunction)\n});\nconst SuiMoveNormalizedModules = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), SuiMoveNormalizedModule);\nfunction extractMutableReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"MutableReference\" in normalizedType ? normalizedType.MutableReference : void 0;\n}\nfunction extractReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"Reference\" in normalizedType ? normalizedType.Reference : void 0;\n}\nfunction extractStructTag(normalizedType) {\n  if (typeof normalizedType === \"object\" && \"Struct\" in normalizedType) {\n    return normalizedType;\n  }\n  const ref = extractReference(normalizedType);\n  const mutRef = extractMutableReference(normalizedType);\n  if (typeof ref === \"object\" && \"Struct\" in ref) {\n    return ref;\n  }\n  if (typeof mutRef === \"object\" && \"Struct\" in mutRef) {\n    return mutRef;\n  }\n  return void 0;\n}\n\n//# sourceMappingURL=normalized.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/normalized.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/objects.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/types/objects.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckpointedObjectId: () => (/* binding */ CheckpointedObjectId),\n/* harmony export */   DisplayFieldsBackwardCompatibleResponse: () => (/* binding */ DisplayFieldsBackwardCompatibleResponse),\n/* harmony export */   DisplayFieldsResponse: () => (/* binding */ DisplayFieldsResponse),\n/* harmony export */   GetOwnedObjectsResponse: () => (/* binding */ GetOwnedObjectsResponse),\n/* harmony export */   MIST_PER_SUI: () => (/* binding */ MIST_PER_SUI),\n/* harmony export */   MovePackageContent: () => (/* binding */ MovePackageContent),\n/* harmony export */   ObjectContentFields: () => (/* binding */ ObjectContentFields),\n/* harmony export */   ObjectRead: () => (/* binding */ ObjectRead),\n/* harmony export */   ObjectStatus: () => (/* binding */ ObjectStatus),\n/* harmony export */   ObjectType: () => (/* binding */ ObjectType),\n/* harmony export */   OwnedObjectRef: () => (/* binding */ OwnedObjectRef),\n/* harmony export */   PaginatedObjectsResponse: () => (/* binding */ PaginatedObjectsResponse),\n/* harmony export */   SUI_DECIMALS: () => (/* binding */ SUI_DECIMALS),\n/* harmony export */   SuiGasData: () => (/* binding */ SuiGasData),\n/* harmony export */   SuiMoveObject: () => (/* binding */ SuiMoveObject),\n/* harmony export */   SuiMovePackage: () => (/* binding */ SuiMovePackage),\n/* harmony export */   SuiObjectData: () => (/* binding */ SuiObjectData),\n/* harmony export */   SuiObjectDataOptions: () => (/* binding */ SuiObjectDataOptions),\n/* harmony export */   SuiObjectInfo: () => (/* binding */ SuiObjectInfo),\n/* harmony export */   SuiObjectRef: () => (/* binding */ SuiObjectRef),\n/* harmony export */   SuiObjectResponse: () => (/* binding */ SuiObjectResponse),\n/* harmony export */   SuiObjectResponseError: () => (/* binding */ SuiObjectResponseError),\n/* harmony export */   SuiParsedData: () => (/* binding */ SuiParsedData),\n/* harmony export */   SuiRawData: () => (/* binding */ SuiRawData),\n/* harmony export */   SuiRawMoveObject: () => (/* binding */ SuiRawMoveObject),\n/* harmony export */   SuiRawMovePackage: () => (/* binding */ SuiRawMovePackage),\n/* harmony export */   TransactionEffectsModifiedAtVersions: () => (/* binding */ TransactionEffectsModifiedAtVersions),\n/* harmony export */   getMoveObject: () => (/* binding */ getMoveObject),\n/* harmony export */   getMoveObjectType: () => (/* binding */ getMoveObjectType),\n/* harmony export */   getMovePackageContent: () => (/* binding */ getMovePackageContent),\n/* harmony export */   getObjectDeletedResponse: () => (/* binding */ getObjectDeletedResponse),\n/* harmony export */   getObjectDisplay: () => (/* binding */ getObjectDisplay),\n/* harmony export */   getObjectFields: () => (/* binding */ getObjectFields),\n/* harmony export */   getObjectId: () => (/* binding */ getObjectId),\n/* harmony export */   getObjectNotExistsResponse: () => (/* binding */ getObjectNotExistsResponse),\n/* harmony export */   getObjectOwner: () => (/* binding */ getObjectOwner),\n/* harmony export */   getObjectPreviousTransactionDigest: () => (/* binding */ getObjectPreviousTransactionDigest),\n/* harmony export */   getObjectReference: () => (/* binding */ getObjectReference),\n/* harmony export */   getObjectType: () => (/* binding */ getObjectType),\n/* harmony export */   getObjectVersion: () => (/* binding */ getObjectVersion),\n/* harmony export */   getSharedObjectInitialVersion: () => (/* binding */ getSharedObjectInitialVersion),\n/* harmony export */   getSuiObjectData: () => (/* binding */ getSuiObjectData),\n/* harmony export */   hasPublicTransfer: () => (/* binding */ hasPublicTransfer),\n/* harmony export */   isImmutableObject: () => (/* binding */ isImmutableObject),\n/* harmony export */   isSharedObject: () => (/* binding */ isSharedObject),\n/* harmony export */   isSuiObjectResponse: () => (/* binding */ isSuiObjectResponse)\n/* harmony export */ });\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/common.js\");\n\n\nconst ObjectType = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"package\")]);\nconst SuiObjectRef = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  /** Base64 string representing the object digest */\n  digest: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  /** Hex code as string representing the object id */\n  objectId: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  /** Object version */\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.bigint)()])\n});\nconst OwnedObjectRef = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  owner: _common_js__WEBPACK_IMPORTED_MODULE_1__.ObjectOwner,\n  reference: SuiObjectRef\n});\nconst TransactionEffectsModifiedAtVersions = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  objectId: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  sequenceNumber: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n});\nconst SuiGasData = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  payment: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiObjectRef),\n  /** Gas Object's owner */\n  owner: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  price: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  budget: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n});\nconst SuiObjectInfo = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assign)(\n  SuiObjectRef,\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n    owner: _common_js__WEBPACK_IMPORTED_MODULE_1__.ObjectOwner,\n    previousTransaction: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n  })\n);\nconst ObjectContentFields = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.any)());\nconst MovePackageContent = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.unknown)());\nconst SuiMoveObject = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  /** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  /** Fields and values stored inside the Move object */\n  fields: ObjectContentFields,\n  hasPublicTransfer: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)()\n});\nconst SuiMovePackage = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  /** A mapping from module name to disassembled Move bytecode */\n  disassembled: MovePackageContent\n});\nconst SuiParsedData = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assign)(SuiMoveObject, (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ dataType: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"moveObject\") })),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assign)(SuiMovePackage, (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ dataType: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"package\") }))\n]);\nconst SuiRawMoveObject = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  /** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  hasPublicTransfer: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)(),\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  bcsBytes: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n});\nconst SuiRawMovePackage = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  id: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  /** A mapping from module name to Move bytecode enocded in base64*/\n  moduleMap: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())\n});\nconst SuiRawData = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assign)(SuiRawMoveObject, (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ dataType: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"moveObject\") })),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.assign)(SuiRawMovePackage, (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({ dataType: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"package\") }))\n]);\nconst SUI_DECIMALS = 9;\nconst MIST_PER_SUI = BigInt(1e9);\nconst SuiObjectResponseError = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  code: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  error: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  object_id: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  parent_object_id: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()),\n  digest: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())\n});\nconst DisplayFieldsResponse = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  data: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()))),\n  error: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(SuiObjectResponseError))\n});\nconst DisplayFieldsBackwardCompatibleResponse = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  DisplayFieldsResponse,\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()))\n]);\nconst SuiObjectData = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  objectId: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  digest: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  /**\n   * Type of the object, default to be undefined unless SuiObjectDataOptions.showType is set to true\n   */\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())),\n  /**\n   * Move object content or package content, default to be undefined unless SuiObjectDataOptions.showContent is set to true\n   */\n  content: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(SuiParsedData)),\n  /**\n   * Move object content or package content in BCS bytes, default to be undefined unless SuiObjectDataOptions.showBcs is set to true\n   */\n  bcs: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(SuiRawData)),\n  /**\n   * The owner of this object. Default to be undefined unless SuiObjectDataOptions.showOwner is set to true\n   */\n  owner: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(_common_js__WEBPACK_IMPORTED_MODULE_1__.ObjectOwner)),\n  /**\n   * The digest of the transaction that created or last mutated this object.\n   * Default to be undefined unless SuiObjectDataOptions.showPreviousTransaction is set to true\n   */\n  previousTransaction: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())),\n  /**\n   * The amount of SUI we would rebate if this object gets deleted.\n   * This number is re-calculated each time the object is mutated based on\n   * the present storage gas price.\n   * Default to be undefined unless SuiObjectDataOptions.showStorageRebate is set to true\n   */\n  storageRebate: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())),\n  /**\n   * Display metadata for this object, default to be undefined unless SuiObjectDataOptions.showDisplay is set to true\n   * This can also be None if the struct type does not have Display defined\n   * See more details in https://forums.sui.io/t/nft-object-display-proposal/4872\n   */\n  display: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(DisplayFieldsBackwardCompatibleResponse))\n});\nconst SuiObjectDataOptions = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  /* Whether to fetch the object type, default to be true */\n  showType: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)())),\n  /* Whether to fetch the object content, default to be false */\n  showContent: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)())),\n  /* Whether to fetch the object content in BCS bytes, default to be false */\n  showBcs: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)())),\n  /* Whether to fetch the object owner, default to be false */\n  showOwner: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)())),\n  /* Whether to fetch the previous transaction digest, default to be false */\n  showPreviousTransaction: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)())),\n  /* Whether to fetch the storage rebate, default to be false */\n  showStorageRebate: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)())),\n  /* Whether to fetch the display metadata, default to be false */\n  showDisplay: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)()))\n});\nconst ObjectStatus = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Exists\"), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"notExists\"), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"Deleted\")]);\nconst GetOwnedObjectsResponse = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiObjectInfo);\nconst SuiObjectResponse = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  data: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(SuiObjectData)),\n  error: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)(SuiObjectResponseError))\n});\nfunction getSuiObjectData(resp) {\n  return resp.data;\n}\nfunction getObjectDeletedResponse(resp) {\n  if (resp.error && \"object_id\" in resp.error && \"version\" in resp.error && \"digest\" in resp.error) {\n    const error = resp.error;\n    return {\n      objectId: error.object_id,\n      version: error.version,\n      digest: error.digest\n    };\n  }\n  return void 0;\n}\nfunction getObjectNotExistsResponse(resp) {\n  if (resp.error && \"object_id\" in resp.error && !(\"version\" in resp.error) && !(\"digest\" in resp.error)) {\n    return resp.error.object_id;\n  }\n  return void 0;\n}\nfunction getObjectReference(resp) {\n  if (\"reference\" in resp) {\n    return resp.reference;\n  }\n  const exists = getSuiObjectData(resp);\n  if (exists) {\n    return {\n      objectId: exists.objectId,\n      version: exists.version,\n      digest: exists.digest\n    };\n  }\n  return getObjectDeletedResponse(resp);\n}\nfunction getObjectId(data) {\n  if (\"objectId\" in data) {\n    return data.objectId;\n  }\n  return getObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data);\n}\nfunction getObjectVersion(data) {\n  if (\"version\" in data) {\n    return data.version;\n  }\n  return getObjectReference(data)?.version;\n}\nfunction isSuiObjectResponse(resp) {\n  return resp.data !== void 0;\n}\nfunction getObjectType(resp) {\n  const data = isSuiObjectResponse(resp) ? resp.data : resp;\n  if (!data?.type && \"data\" in resp) {\n    if (data?.content?.dataType === \"package\") {\n      return \"package\";\n    }\n    return getMoveObjectType(resp);\n  }\n  return data?.type;\n}\nfunction getObjectPreviousTransactionDigest(resp) {\n  return getSuiObjectData(resp)?.previousTransaction;\n}\nfunction getObjectOwner(resp) {\n  if ((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(resp, _common_js__WEBPACK_IMPORTED_MODULE_1__.ObjectOwner)) {\n    return resp;\n  }\n  return getSuiObjectData(resp)?.owner;\n}\nfunction getObjectDisplay(resp) {\n  const display = getSuiObjectData(resp)?.display;\n  if (!display) {\n    return { data: null, error: null };\n  }\n  if ((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.is)(display, DisplayFieldsResponse)) {\n    return display;\n  }\n  return {\n    data: display,\n    error: null\n  };\n}\nfunction getSharedObjectInitialVersion(resp) {\n  const owner = getObjectOwner(resp);\n  if (owner && typeof owner === \"object\" && \"Shared\" in owner) {\n    return owner.Shared.initial_shared_version;\n  } else {\n    return void 0;\n  }\n}\nfunction isSharedObject(resp) {\n  const owner = getObjectOwner(resp);\n  return !!owner && typeof owner === \"object\" && \"Shared\" in owner;\n}\nfunction isImmutableObject(resp) {\n  const owner = getObjectOwner(resp);\n  return owner === \"Immutable\";\n}\nfunction getMoveObjectType(resp) {\n  return getMoveObject(resp)?.type;\n}\nfunction getObjectFields(resp) {\n  if (\"fields\" in resp) {\n    return resp.fields;\n  }\n  return getMoveObject(resp)?.fields;\n}\nfunction isSuiObjectDataWithContent(data) {\n  return data.content !== void 0;\n}\nfunction getMoveObject(data) {\n  const suiObject = \"data\" in data ? getSuiObjectData(data) : data;\n  if (!suiObject || !isSuiObjectDataWithContent(suiObject) || suiObject.content.dataType !== \"moveObject\") {\n    return void 0;\n  }\n  return suiObject.content;\n}\nfunction hasPublicTransfer(data) {\n  return getMoveObject(data)?.hasPublicTransfer ?? false;\n}\nfunction getMovePackageContent(data) {\n  if (\"disassembled\" in data) {\n    return data.disassembled;\n  }\n  const suiObject = getSuiObjectData(data);\n  if (suiObject?.content?.dataType !== \"package\") {\n    return void 0;\n  }\n  return suiObject.content.disassembled;\n}\nconst CheckpointedObjectId = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  objectId: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n  atCheckpoint: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)())\n});\nconst PaginatedObjectsResponse = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n  data: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.array)(SuiObjectResponse),\n  nextCursor: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)())),\n  hasNextPage: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.boolean)()\n});\nconst ObjectRead = (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.union)([\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    details: SuiObjectData,\n    status: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"VersionFound\")\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    details: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(),\n    status: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"ObjectNotExists\")\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    details: SuiObjectRef,\n    status: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"ObjectDeleted\")\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    details: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.tuple)([(0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)()]),\n    status: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"VersionNotFound\")\n  }),\n  (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n    details: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.object)({\n      asked_version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)(),\n      latest_version: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.number)(),\n      object_id: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.string)()\n    }),\n    status: (0,superstruct__WEBPACK_IMPORTED_MODULE_0__.literal)(\"VersionTooHigh\")\n  })\n]);\n\n//# sourceMappingURL=objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/types/objects.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/format.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/utils/format.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatAddress: () => (/* binding */ formatAddress),\n/* harmony export */   formatDigest: () => (/* binding */ formatDigest)\n/* harmony export */ });\nconst ELLIPSIS = \"\\u2026\";\nfunction formatAddress(address) {\n  if (address.length <= 6) {\n    return address;\n  }\n  const offset = address.startsWith(\"0x\") ? 2 : 0;\n  return `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(-4)}`;\n}\nfunction formatDigest(digest) {\n  return `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\n\n//# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL3V0aWxzL2Zvcm1hdC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0NBQWtDLEVBQUUsU0FBUyxFQUFFLGtCQUFrQjtBQUMvRTtBQUNBO0FBQ0EsWUFBWSxvQkFBb0IsRUFBRSxTQUFTO0FBQzNDO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG93bmxvYWRzL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS5qcy9kaXN0L2VzbS91dGlscy9mb3JtYXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRUxMSVBTSVMgPSBcIlxcdTIwMjZcIjtcbmZ1bmN0aW9uIGZvcm1hdEFkZHJlc3MoYWRkcmVzcykge1xuICBpZiAoYWRkcmVzcy5sZW5ndGggPD0gNikge1xuICAgIHJldHVybiBhZGRyZXNzO1xuICB9XG4gIGNvbnN0IG9mZnNldCA9IGFkZHJlc3Muc3RhcnRzV2l0aChcIjB4XCIpID8gMiA6IDA7XG4gIHJldHVybiBgMHgke2FkZHJlc3Muc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyA0KX0ke0VMTElQU0lTfSR7YWRkcmVzcy5zbGljZSgtNCl9YDtcbn1cbmZ1bmN0aW9uIGZvcm1hdERpZ2VzdChkaWdlc3QpIHtcbiAgcmV0dXJuIGAke2RpZ2VzdC5zbGljZSgwLCAxMCl9JHtFTExJUFNJU31gO1xufVxuZXhwb3J0IHtcbiAgZm9ybWF0QWRkcmVzcyxcbiAgZm9ybWF0RGlnZXN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/format.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/utils/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MIST_PER_SUI: () => (/* binding */ MIST_PER_SUI),\n/* harmony export */   MOVE_STDLIB_ADDRESS: () => (/* binding */ MOVE_STDLIB_ADDRESS),\n/* harmony export */   SUI_ADDRESS_LENGTH: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.SUI_ADDRESS_LENGTH),\n/* harmony export */   SUI_CLOCK_OBJECT_ID: () => (/* binding */ SUI_CLOCK_OBJECT_ID),\n/* harmony export */   SUI_DECIMALS: () => (/* binding */ SUI_DECIMALS),\n/* harmony export */   SUI_FRAMEWORK_ADDRESS: () => (/* binding */ SUI_FRAMEWORK_ADDRESS),\n/* harmony export */   SUI_SYSTEM_ADDRESS: () => (/* binding */ SUI_SYSTEM_ADDRESS),\n/* harmony export */   SUI_SYSTEM_MODULE_NAME: () => (/* binding */ SUI_SYSTEM_MODULE_NAME),\n/* harmony export */   SUI_SYSTEM_STATE_OBJECT_ID: () => (/* binding */ SUI_SYSTEM_STATE_OBJECT_ID),\n/* harmony export */   SUI_TYPE_ARG: () => (/* binding */ SUI_TYPE_ARG),\n/* harmony export */   assert: () => (/* reexport safe */ superstruct__WEBPACK_IMPORTED_MODULE_1__.assert),\n/* harmony export */   formatAddress: () => (/* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.formatAddress),\n/* harmony export */   formatDigest: () => (/* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.formatDigest),\n/* harmony export */   fromB64: () => (/* reexport safe */ _mysten_bcs__WEBPACK_IMPORTED_MODULE_3__.fromB64),\n/* harmony export */   fromHEX: () => (/* reexport safe */ _mysten_bcs__WEBPACK_IMPORTED_MODULE_3__.fromHEX),\n/* harmony export */   is: () => (/* reexport safe */ superstruct__WEBPACK_IMPORTED_MODULE_1__.is),\n/* harmony export */   isValidSuiAddress: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.isValidSuiAddress),\n/* harmony export */   isValidSuiObjectId: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.isValidSuiObjectId),\n/* harmony export */   isValidTransactionDigest: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.isValidTransactionDigest),\n/* harmony export */   normalizeStructTag: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeStructTag),\n/* harmony export */   normalizeSuiAddress: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiAddress),\n/* harmony export */   normalizeSuiObjectId: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiObjectId),\n/* harmony export */   parseStructTag: () => (/* reexport safe */ _sui_types_js__WEBPACK_IMPORTED_MODULE_0__.parseStructTag),\n/* harmony export */   toB64: () => (/* reexport safe */ _mysten_bcs__WEBPACK_IMPORTED_MODULE_3__.toB64),\n/* harmony export */   toHEX: () => (/* reexport safe */ _mysten_bcs__WEBPACK_IMPORTED_MODULE_3__.toHEX)\n/* harmony export */ });\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/format.js\");\n/* harmony import */ var _sui_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sui-types.js */ \"(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! superstruct */ \"(ssr)/../../node_modules/superstruct/dist/index.mjs\");\n\n\n\n\nconst SUI_DECIMALS = 9;\nconst MIST_PER_SUI = BigInt(1e9);\nconst MOVE_STDLIB_ADDRESS = \"0x1\";\nconst SUI_FRAMEWORK_ADDRESS = \"0x2\";\nconst SUI_SYSTEM_ADDRESS = \"0x3\";\nconst SUI_CLOCK_OBJECT_ID = (0,_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiObjectId)(\"0x6\");\nconst SUI_SYSTEM_MODULE_NAME = \"sui_system\";\nconst SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nconst SUI_SYSTEM_STATE_OBJECT_ID = (0,_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiObjectId)(\"0x5\");\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBVWxDO0FBQ3FDO0FBQ3BCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUVBQW9CO0FBQ2hEO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QyxtQ0FBbUMsbUVBQW9CO0FBMkJyRDtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb3dubG9hZHMvbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL3V0aWxzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdEFkZHJlc3MsIGZvcm1hdERpZ2VzdCB9IGZyb20gXCIuL2Zvcm1hdC5qc1wiO1xuaW1wb3J0IHtcbiAgaXNWYWxpZFN1aUFkZHJlc3MsXG4gIGlzVmFsaWRTdWlPYmplY3RJZCxcbiAgaXNWYWxpZFRyYW5zYWN0aW9uRGlnZXN0LFxuICBub3JtYWxpemVTdHJ1Y3RUYWcsXG4gIG5vcm1hbGl6ZVN1aUFkZHJlc3MsXG4gIG5vcm1hbGl6ZVN1aU9iamVjdElkLFxuICBwYXJzZVN0cnVjdFRhZyxcbiAgU1VJX0FERFJFU1NfTEVOR1RIXG59IGZyb20gXCIuL3N1aS10eXBlcy5qc1wiO1xuaW1wb3J0IHsgZnJvbUI2NCwgdG9CNjQsIGZyb21IRVgsIHRvSEVYIH0gZnJvbSBcIkBteXN0ZW4vYmNzXCI7XG5pbXBvcnQgeyBpcywgYXNzZXJ0IH0gZnJvbSBcInN1cGVyc3RydWN0XCI7XG5jb25zdCBTVUlfREVDSU1BTFMgPSA5O1xuY29uc3QgTUlTVF9QRVJfU1VJID0gQmlnSW50KDFlOSk7XG5jb25zdCBNT1ZFX1NURExJQl9BRERSRVNTID0gXCIweDFcIjtcbmNvbnN0IFNVSV9GUkFNRVdPUktfQUREUkVTUyA9IFwiMHgyXCI7XG5jb25zdCBTVUlfU1lTVEVNX0FERFJFU1MgPSBcIjB4M1wiO1xuY29uc3QgU1VJX0NMT0NLX09CSkVDVF9JRCA9IG5vcm1hbGl6ZVN1aU9iamVjdElkKFwiMHg2XCIpO1xuY29uc3QgU1VJX1NZU1RFTV9NT0RVTEVfTkFNRSA9IFwic3VpX3N5c3RlbVwiO1xuY29uc3QgU1VJX1RZUEVfQVJHID0gYCR7U1VJX0ZSQU1FV09SS19BRERSRVNTfTo6c3VpOjpTVUlgO1xuY29uc3QgU1VJX1NZU1RFTV9TVEFURV9PQkpFQ1RfSUQgPSBub3JtYWxpemVTdWlPYmplY3RJZChcIjB4NVwiKTtcbmV4cG9ydCB7XG4gIE1JU1RfUEVSX1NVSSxcbiAgTU9WRV9TVERMSUJfQUREUkVTUyxcbiAgU1VJX0FERFJFU1NfTEVOR1RILFxuICBTVUlfQ0xPQ0tfT0JKRUNUX0lELFxuICBTVUlfREVDSU1BTFMsXG4gIFNVSV9GUkFNRVdPUktfQUREUkVTUyxcbiAgU1VJX1NZU1RFTV9BRERSRVNTLFxuICBTVUlfU1lTVEVNX01PRFVMRV9OQU1FLFxuICBTVUlfU1lTVEVNX1NUQVRFX09CSkVDVF9JRCxcbiAgU1VJX1RZUEVfQVJHLFxuICBhc3NlcnQsXG4gIGZvcm1hdEFkZHJlc3MsXG4gIGZvcm1hdERpZ2VzdCxcbiAgZnJvbUI2NCxcbiAgZnJvbUhFWCxcbiAgaXMsXG4gIGlzVmFsaWRTdWlBZGRyZXNzLFxuICBpc1ZhbGlkU3VpT2JqZWN0SWQsXG4gIGlzVmFsaWRUcmFuc2FjdGlvbkRpZ2VzdCxcbiAgbm9ybWFsaXplU3RydWN0VGFnLFxuICBub3JtYWxpemVTdWlBZGRyZXNzLFxuICBub3JtYWxpemVTdWlPYmplY3RJZCxcbiAgcGFyc2VTdHJ1Y3RUYWcsXG4gIHRvQjY0LFxuICB0b0hFWFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SUI_ADDRESS_LENGTH: () => (/* binding */ SUI_ADDRESS_LENGTH),\n/* harmony export */   isValidSuiAddress: () => (/* binding */ isValidSuiAddress),\n/* harmony export */   isValidSuiObjectId: () => (/* binding */ isValidSuiObjectId),\n/* harmony export */   isValidTransactionDigest: () => (/* binding */ isValidTransactionDigest),\n/* harmony export */   normalizeStructTag: () => (/* binding */ normalizeStructTag),\n/* harmony export */   normalizeSuiAddress: () => (/* binding */ normalizeSuiAddress),\n/* harmony export */   normalizeSuiObjectId: () => (/* binding */ normalizeSuiObjectId),\n/* harmony export */   parseStructTag: () => (/* binding */ parseStructTag)\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mysten/bcs */ \"(ssr)/../../node_modules/@mysten/bcs/dist/index.mjs\");\n\nconst TX_DIGEST_LENGTH = 32;\nfunction isValidTransactionDigest(value) {\n  try {\n    const buffer = (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.fromB58)(value);\n    return buffer.length === TX_DIGEST_LENGTH;\n  } catch (e) {\n    return false;\n  }\n}\nconst SUI_ADDRESS_LENGTH = 32;\nfunction isValidSuiAddress(value) {\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\nfunction isValidSuiObjectId(value) {\n  return isValidSuiAddress(value);\n}\nfunction parseTypeTag(type) {\n  if (!type.includes(\"::\"))\n    return type;\n  return parseStructTag(type);\n}\nfunction parseStructTag(type) {\n  const [address, module] = type.split(\"::\");\n  const rest = type.slice(address.length + module.length + 4);\n  const name = rest.includes(\"<\") ? rest.slice(0, rest.indexOf(\"<\")) : rest;\n  const typeParams = rest.includes(\"<\") ? (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_0__.splitGenericParameters)(rest.slice(rest.indexOf(\"<\") + 1, rest.lastIndexOf(\">\"))).map(\n    (typeParam) => parseTypeTag(typeParam.trim())\n  ) : [];\n  return {\n    address: normalizeSuiAddress(address),\n    module,\n    name,\n    typeParams\n  };\n}\nfunction normalizeStructTag(type) {\n  const { address, module, name, typeParams } = typeof type === \"string\" ? parseStructTag(type) : type;\n  const formattedTypeParams = typeParams.length > 0 ? `<${typeParams.map(\n    (typeParam) => typeof typeParam === \"string\" ? typeParam : normalizeStructTag(typeParam)\n  ).join(\",\")}>` : \"\";\n  return `${address}::${module}::${name}${formattedTypeParams}`;\n}\nfunction normalizeSuiAddress(value, forceAdd0x = false) {\n  let address = value.toLowerCase();\n  if (!forceAdd0x && address.startsWith(\"0x\")) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, \"0\")}`;\n}\nfunction normalizeSuiObjectId(value, forceAdd0x = false) {\n  return normalizeSuiAddress(value, forceAdd0x);\n}\nfunction isHex(value) {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\nfunction getHexByteLength(value) {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n\n//# sourceMappingURL=sui-types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL3V0aWxzL3N1aS10eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFPO0FBQzFCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLG1FQUFzQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsb0NBQW9DO0FBQzlDLDBEQUEwRDtBQUMxRDtBQUNBLGNBQWM7QUFDZCxZQUFZLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxFQUFFLG9CQUFvQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhDQUE4QztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0Rvd25sb2Fkcy9ub2RlX21vZHVsZXMvQG15c3Rlbi9zdWkuanMvZGlzdC9lc20vdXRpbHMvc3VpLXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21CNTgsIHNwbGl0R2VuZXJpY1BhcmFtZXRlcnMgfSBmcm9tIFwiQG15c3Rlbi9iY3NcIjtcbmNvbnN0IFRYX0RJR0VTVF9MRU5HVEggPSAzMjtcbmZ1bmN0aW9uIGlzVmFsaWRUcmFuc2FjdGlvbkRpZ2VzdCh2YWx1ZSkge1xuICB0cnkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGZyb21CNTgodmFsdWUpO1xuICAgIHJldHVybiBidWZmZXIubGVuZ3RoID09PSBUWF9ESUdFU1RfTEVOR1RIO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5jb25zdCBTVUlfQUREUkVTU19MRU5HVEggPSAzMjtcbmZ1bmN0aW9uIGlzVmFsaWRTdWlBZGRyZXNzKHZhbHVlKSB7XG4gIHJldHVybiBpc0hleCh2YWx1ZSkgJiYgZ2V0SGV4Qnl0ZUxlbmd0aCh2YWx1ZSkgPT09IFNVSV9BRERSRVNTX0xFTkdUSDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRTdWlPYmplY3RJZCh2YWx1ZSkge1xuICByZXR1cm4gaXNWYWxpZFN1aUFkZHJlc3ModmFsdWUpO1xufVxuZnVuY3Rpb24gcGFyc2VUeXBlVGFnKHR5cGUpIHtcbiAgaWYgKCF0eXBlLmluY2x1ZGVzKFwiOjpcIikpXG4gICAgcmV0dXJuIHR5cGU7XG4gIHJldHVybiBwYXJzZVN0cnVjdFRhZyh0eXBlKTtcbn1cbmZ1bmN0aW9uIHBhcnNlU3RydWN0VGFnKHR5cGUpIHtcbiAgY29uc3QgW2FkZHJlc3MsIG1vZHVsZV0gPSB0eXBlLnNwbGl0KFwiOjpcIik7XG4gIGNvbnN0IHJlc3QgPSB0eXBlLnNsaWNlKGFkZHJlc3MubGVuZ3RoICsgbW9kdWxlLmxlbmd0aCArIDQpO1xuICBjb25zdCBuYW1lID0gcmVzdC5pbmNsdWRlcyhcIjxcIikgPyByZXN0LnNsaWNlKDAsIHJlc3QuaW5kZXhPZihcIjxcIikpIDogcmVzdDtcbiAgY29uc3QgdHlwZVBhcmFtcyA9IHJlc3QuaW5jbHVkZXMoXCI8XCIpID8gc3BsaXRHZW5lcmljUGFyYW1ldGVycyhyZXN0LnNsaWNlKHJlc3QuaW5kZXhPZihcIjxcIikgKyAxLCByZXN0Lmxhc3RJbmRleE9mKFwiPlwiKSkpLm1hcChcbiAgICAodHlwZVBhcmFtKSA9PiBwYXJzZVR5cGVUYWcodHlwZVBhcmFtLnRyaW0oKSlcbiAgKSA6IFtdO1xuICByZXR1cm4ge1xuICAgIGFkZHJlc3M6IG5vcm1hbGl6ZVN1aUFkZHJlc3MoYWRkcmVzcyksXG4gICAgbW9kdWxlLFxuICAgIG5hbWUsXG4gICAgdHlwZVBhcmFtc1xuICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU3RydWN0VGFnKHR5cGUpIHtcbiAgY29uc3QgeyBhZGRyZXNzLCBtb2R1bGUsIG5hbWUsIHR5cGVQYXJhbXMgfSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gcGFyc2VTdHJ1Y3RUYWcodHlwZSkgOiB0eXBlO1xuICBjb25zdCBmb3JtYXR0ZWRUeXBlUGFyYW1zID0gdHlwZVBhcmFtcy5sZW5ndGggPiAwID8gYDwke3R5cGVQYXJhbXMubWFwKFxuICAgICh0eXBlUGFyYW0pID0+IHR5cGVvZiB0eXBlUGFyYW0gPT09IFwic3RyaW5nXCIgPyB0eXBlUGFyYW0gOiBub3JtYWxpemVTdHJ1Y3RUYWcodHlwZVBhcmFtKVxuICApLmpvaW4oXCIsXCIpfT5gIDogXCJcIjtcbiAgcmV0dXJuIGAke2FkZHJlc3N9Ojoke21vZHVsZX06OiR7bmFtZX0ke2Zvcm1hdHRlZFR5cGVQYXJhbXN9YDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1aUFkZHJlc3ModmFsdWUsIGZvcmNlQWRkMHggPSBmYWxzZSkge1xuICBsZXQgYWRkcmVzcyA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghZm9yY2VBZGQweCAmJiBhZGRyZXNzLnN0YXJ0c1dpdGgoXCIweFwiKSkge1xuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDIpO1xuICB9XG4gIHJldHVybiBgMHgke2FkZHJlc3MucGFkU3RhcnQoU1VJX0FERFJFU1NfTEVOR1RIICogMiwgXCIwXCIpfWA7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTdWlPYmplY3RJZCh2YWx1ZSwgZm9yY2VBZGQweCA9IGZhbHNlKSB7XG4gIHJldHVybiBub3JtYWxpemVTdWlBZGRyZXNzKHZhbHVlLCBmb3JjZUFkZDB4KTtcbn1cbmZ1bmN0aW9uIGlzSGV4KHZhbHVlKSB7XG4gIHJldHVybiAvXigweHwwWCk/W2EtZkEtRjAtOV0rJC8udGVzdCh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoICUgMiA9PT0gMDtcbn1cbmZ1bmN0aW9uIGdldEhleEJ5dGVMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIC9eKDB4fDBYKS8udGVzdCh2YWx1ZSkgPyAodmFsdWUubGVuZ3RoIC0gMikgLyAyIDogdmFsdWUubGVuZ3RoIC8gMjtcbn1cbmV4cG9ydCB7XG4gIFNVSV9BRERSRVNTX0xFTkdUSCxcbiAgaXNWYWxpZFN1aUFkZHJlc3MsXG4gIGlzVmFsaWRTdWlPYmplY3RJZCxcbiAgaXNWYWxpZFRyYW5zYWN0aW9uRGlnZXN0LFxuICBub3JtYWxpemVTdHJ1Y3RUYWcsXG4gIG5vcm1hbGl6ZVN1aUFkZHJlc3MsXG4gIG5vcm1hbGl6ZVN1aU9iamVjdElkLFxuICBwYXJzZVN0cnVjdFRhZ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1aS10eXBlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/utils/sui-types.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@mysten/sui.js/dist/esm/version.js":
/*!*************************************************************!*\
  !*** ../../node_modules/@mysten/sui.js/dist/esm/version.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PACKAGE_VERSION: () => (/* binding */ PACKAGE_VERSION),\n/* harmony export */   TARGETED_RPC_VERSION: () => (/* binding */ TARGETED_RPC_VERSION)\n/* harmony export */ });\nconst PACKAGE_VERSION = \"0.48.0\";\nconst TARGETED_RPC_VERSION = \"1.16.0\";\n\n//# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpLmpzL2Rpc3QvZXNtL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG93bmxvYWRzL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS5qcy9kaXN0L2VzbS92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBBQ0tBR0VfVkVSU0lPTiA9IFwiMC40OC4wXCI7XG5jb25zdCBUQVJHRVRFRF9SUENfVkVSU0lPTiA9IFwiMS4xNi4wXCI7XG5leHBvcnQge1xuICBQQUNLQUdFX1ZFUlNJT04sXG4gIFRBUkdFVEVEX1JQQ19WRVJTSU9OXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@mysten/sui.js/dist/esm/version.js\n");

/***/ })

};
;